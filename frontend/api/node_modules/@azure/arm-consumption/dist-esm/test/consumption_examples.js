/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { ConsumptionManagementClient } from "../src/consumptionManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Consumption test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let budgetName;
    let vmName;
    let scope;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new ConsumptionManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            budgetName = "mybudgetxxxy";
            vmName = "myvmxxx";
            scope = "subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup;
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("budgets create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.budgets.createOrUpdate(scope, budgetName, {
                category: "Cost",
                amount: 100,
                timeGrain: "Monthly",
                timePeriod: {
                    startDate: new Date("2023-09-01T00:00:00Z"),
                    endDate: new Date("2023-09-31T00:00:00Z")
                },
                filter: {
                    and: [
                        {
                            dimensions: {
                                name: "ResourceId",
                                operator: "In",
                                values: [
                                    "subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Compute/virtualMachines/" + vmName
                                ]
                            }
                        },
                        {
                            tags: {
                                name: "category",
                                operator: "In",
                                values: [
                                    "Dev",
                                    "Prod"
                                ]
                            }
                        }
                    ]
                },
                notifications: {
                    Actual_GreaterThan_80_Percent: {
                        enabled: true,
                        operator: "GreaterThan",
                        threshold: 80,
                        contactEmails: [
                            "johndoe@contoso.com",
                            "janesmith@contoso.com"
                        ],
                        contactRoles: [
                            "Contributor",
                            "Reader"
                        ],
                        thresholdType: "Actual"
                    }
                }
            });
            assert.equal(res.name, budgetName);
        });
    });
    it("budgets get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.budgets.get(scope, budgetName);
            assert.equal(res.name, budgetName);
        });
    });
    it("budgets delete test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.budgets.delete(scope, budgetName);
        });
    });
});
//# sourceMappingURL=consumption_examples.js.map