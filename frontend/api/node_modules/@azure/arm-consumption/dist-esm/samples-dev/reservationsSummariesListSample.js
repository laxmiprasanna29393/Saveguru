/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ConsumptionManagementClient } from "@azure/arm-consumption";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Lists the reservations summaries for the defined scope daily or monthly grain.
 *
 * @summary Lists the reservations summaries for the defined scope daily or monthly grain.
 * x-ms-original-file: specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDailyWithBillingAccountId.json
 */
function reservationSummariesDailyWithBillingAccountId() {
    var e_1, _a;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONSUMPTION_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "providers/Microsoft.Billing/billingAccounts/12345";
        const grain = "daily";
        const filter = "properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-11-20";
        const options = { filter };
        const credential = new DefaultAzureCredential();
        const client = new ConsumptionManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _b = __asyncValues(client.reservationsSummaries.list(scope, grain, options)), _c; _c = yield _b.next(), !_c.done;) {
                let item = _c.value;
                resArray.push(item);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        console.log(resArray);
    });
}
/**
 * This sample demonstrates how to Lists the reservations summaries for the defined scope daily or monthly grain.
 *
 * @summary Lists the reservations summaries for the defined scope daily or monthly grain.
 * x-ms-original-file: specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDailyWithBillingProfileId.json
 */
function reservationSummariesDailyWithBillingProfileId() {
    var e_2, _a;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONSUMPTION_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579";
        const grain = "daily";
        const startDate = "2017-10-01";
        const endDate = "2017-11-20";
        const options = {
            startDate,
            endDate
        };
        const credential = new DefaultAzureCredential();
        const client = new ConsumptionManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _b = __asyncValues(client.reservationsSummaries.list(scope, grain, options)), _c; _c = yield _b.next(), !_c.done;) {
                let item = _c.value;
                resArray.push(item);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        console.log(resArray);
    });
}
/**
 * This sample demonstrates how to Lists the reservations summaries for the defined scope daily or monthly grain.
 *
 * @summary Lists the reservations summaries for the defined scope daily or monthly grain.
 * x-ms-original-file: specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithBillingAccountId.json
 */
function reservationSummariesMonthlyWithBillingAccountId() {
    var e_3, _a;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONSUMPTION_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "providers/Microsoft.Billing/billingAccounts/12345";
        const grain = "monthly";
        const credential = new DefaultAzureCredential();
        const client = new ConsumptionManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _b = __asyncValues(client.reservationsSummaries.list(scope, grain)), _c; _c = yield _b.next(), !_c.done;) {
                let item = _c.value;
                resArray.push(item);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        console.log(resArray);
    });
}
/**
 * This sample demonstrates how to Lists the reservations summaries for the defined scope daily or monthly grain.
 *
 * @summary Lists the reservations summaries for the defined scope daily or monthly grain.
 * x-ms-original-file: specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithBillingProfileId.json
 */
function reservationSummariesMonthlyWithBillingProfileId() {
    var e_4, _a;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONSUMPTION_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579";
        const grain = "monthly";
        const credential = new DefaultAzureCredential();
        const client = new ConsumptionManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _b = __asyncValues(client.reservationsSummaries.list(scope, grain)), _c; _c = yield _b.next(), !_c.done;) {
                let item = _c.value;
                resArray.push(item);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        console.log(resArray);
    });
}
/**
 * This sample demonstrates how to Lists the reservations summaries for the defined scope daily or monthly grain.
 *
 * @summary Lists the reservations summaries for the defined scope daily or monthly grain.
 * x-ms-original-file: specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithBillingProfileIdReservationId.json
 */
function reservationSummariesMonthlyWithBillingProfileIdReservationId() {
    var e_5, _a;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONSUMPTION_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579";
        const grain = "monthly";
        const reservationId = "1c6b6358-709f-484c-85f1-72e862a0cf3b";
        const reservationOrderId = "9f39ba10-794f-4dcb-8f4b-8d0cb47c27dc";
        const options = {
            reservationId,
            reservationOrderId
        };
        const credential = new DefaultAzureCredential();
        const client = new ConsumptionManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _b = __asyncValues(client.reservationsSummaries.list(scope, grain, options)), _c; _c = yield _b.next(), !_c.done;) {
                let item = _c.value;
                resArray.push(item);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        console.log(resArray);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        reservationSummariesDailyWithBillingAccountId();
        reservationSummariesDailyWithBillingProfileId();
        reservationSummariesMonthlyWithBillingAccountId();
        reservationSummariesMonthlyWithBillingProfileId();
        reservationSummariesMonthlyWithBillingProfileIdReservationId();
    });
}
main().catch(console.error);
//# sourceMappingURL=reservationsSummariesListSample.js.map