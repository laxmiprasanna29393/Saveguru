/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing Tags operations. */
export class TagsImpl {
    /**
     * Initialize a new instance of the class Tags class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all available tag keys for the defined scope
     * @param scope The scope associated with tags operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope and
     *              '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope..
     * @param options The options parameters.
     */
    get(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, getOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/{scope}/providers/Microsoft.Consumption/tags",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.TagsResult
        },
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=tags.js.map