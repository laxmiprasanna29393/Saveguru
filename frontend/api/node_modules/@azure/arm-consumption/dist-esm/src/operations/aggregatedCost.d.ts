import { AggregatedCost } from "../operationsInterfaces";
import { ConsumptionManagementClient } from "../consumptionManagementClient";
import { AggregatedCostGetByManagementGroupOptionalParams, AggregatedCostGetByManagementGroupResponse, AggregatedCostGetForBillingPeriodByManagementGroupOptionalParams, AggregatedCostGetForBillingPeriodByManagementGroupResponse } from "../models";
/** Class containing AggregatedCost operations. */
export declare class AggregatedCostImpl implements AggregatedCost {
    private readonly client;
    /**
     * Initialize a new instance of the class AggregatedCost class.
     * @param client Reference to the service client
     */
    constructor(client: ConsumptionManagementClient);
    /**
     * Provides the aggregate cost of a management group and all child management groups by current billing
     * period.
     * @param managementGroupId Azure Management Group ID.
     * @param options The options parameters.
     */
    getByManagementGroup(managementGroupId: string, options?: AggregatedCostGetByManagementGroupOptionalParams): Promise<AggregatedCostGetByManagementGroupResponse>;
    /**
     * Provides the aggregate cost of a management group and all child management groups by specified
     * billing period
     * @param managementGroupId Azure Management Group ID.
     * @param billingPeriodName Billing Period Name.
     * @param options The options parameters.
     */
    getForBillingPeriodByManagementGroup(managementGroupId: string, billingPeriodName: string, options?: AggregatedCostGetForBillingPeriodByManagementGroupOptionalParams): Promise<AggregatedCostGetForBillingPeriodByManagementGroupResponse>;
}
//# sourceMappingURL=aggregatedCost.d.ts.map