'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Metrictype} that the service accepts. */
exports.KnownMetrictype = void 0;
(function (KnownMetrictype) {
    /** Actual cost data. */
    KnownMetrictype["ActualCostMetricType"] = "actualcost";
    /** Amortized cost data. */
    KnownMetrictype["AmortizedCostMetricType"] = "amortizedcost";
    /** Usage data. */
    KnownMetrictype["UsageMetricType"] = "usage";
})(exports.KnownMetrictype || (exports.KnownMetrictype = {}));
/** Known values of {@link UsageDetailsKind} that the service accepts. */
exports.KnownUsageDetailsKind = void 0;
(function (KnownUsageDetailsKind) {
    /** Legacy */
    KnownUsageDetailsKind["Legacy"] = "legacy";
    /** Modern */
    KnownUsageDetailsKind["Modern"] = "modern";
})(exports.KnownUsageDetailsKind || (exports.KnownUsageDetailsKind = {}));
/** Known values of {@link CategoryType} that the service accepts. */
exports.KnownCategoryType = void 0;
(function (KnownCategoryType) {
    /** Cost */
    KnownCategoryType["Cost"] = "Cost";
})(exports.KnownCategoryType || (exports.KnownCategoryType = {}));
/** Known values of {@link TimeGrainType} that the service accepts. */
exports.KnownTimeGrainType = void 0;
(function (KnownTimeGrainType) {
    /** Monthly */
    KnownTimeGrainType["Monthly"] = "Monthly";
    /** Quarterly */
    KnownTimeGrainType["Quarterly"] = "Quarterly";
    /** Annually */
    KnownTimeGrainType["Annually"] = "Annually";
    /** BillingMonth */
    KnownTimeGrainType["BillingMonth"] = "BillingMonth";
    /** BillingQuarter */
    KnownTimeGrainType["BillingQuarter"] = "BillingQuarter";
    /** BillingAnnual */
    KnownTimeGrainType["BillingAnnual"] = "BillingAnnual";
})(exports.KnownTimeGrainType || (exports.KnownTimeGrainType = {}));
/** Known values of {@link BudgetOperatorType} that the service accepts. */
exports.KnownBudgetOperatorType = void 0;
(function (KnownBudgetOperatorType) {
    /** In */
    KnownBudgetOperatorType["In"] = "In";
})(exports.KnownBudgetOperatorType || (exports.KnownBudgetOperatorType = {}));
/** Known values of {@link OperatorType} that the service accepts. */
exports.KnownOperatorType = void 0;
(function (KnownOperatorType) {
    /** EqualTo */
    KnownOperatorType["EqualTo"] = "EqualTo";
    /** GreaterThan */
    KnownOperatorType["GreaterThan"] = "GreaterThan";
    /** GreaterThanOrEqualTo */
    KnownOperatorType["GreaterThanOrEqualTo"] = "GreaterThanOrEqualTo";
})(exports.KnownOperatorType || (exports.KnownOperatorType = {}));
/** Known values of {@link ThresholdType} that the service accepts. */
exports.KnownThresholdType = void 0;
(function (KnownThresholdType) {
    /** Actual */
    KnownThresholdType["Actual"] = "Actual";
    /** Forecasted */
    KnownThresholdType["Forecasted"] = "Forecasted";
})(exports.KnownThresholdType || (exports.KnownThresholdType = {}));
/** Known values of {@link CultureCode} that the service accepts. */
exports.KnownCultureCode = void 0;
(function (KnownCultureCode) {
    /** EnUs */
    KnownCultureCode["EnUs"] = "en-us";
    /** JaJp */
    KnownCultureCode["JaJp"] = "ja-jp";
    /** ZhCn */
    KnownCultureCode["ZhCn"] = "zh-cn";
    /** DeDe */
    KnownCultureCode["DeDe"] = "de-de";
    /** EsEs */
    KnownCultureCode["EsEs"] = "es-es";
    /** FrFr */
    KnownCultureCode["FrFr"] = "fr-fr";
    /** ItIt */
    KnownCultureCode["ItIt"] = "it-it";
    /** KoKr */
    KnownCultureCode["KoKr"] = "ko-kr";
    /** PtBr */
    KnownCultureCode["PtBr"] = "pt-br";
    /** RuRu */
    KnownCultureCode["RuRu"] = "ru-ru";
    /** ZhTw */
    KnownCultureCode["ZhTw"] = "zh-tw";
    /** CsCz */
    KnownCultureCode["CsCz"] = "cs-cz";
    /** PlPl */
    KnownCultureCode["PlPl"] = "pl-pl";
    /** TrTr */
    KnownCultureCode["TrTr"] = "tr-tr";
    /** DaDk */
    KnownCultureCode["DaDk"] = "da-dk";
    /** EnGb */
    KnownCultureCode["EnGb"] = "en-gb";
    /** HuHu */
    KnownCultureCode["HuHu"] = "hu-hu";
    /** NbNo */
    KnownCultureCode["NbNo"] = "nb-no";
    /** NlNl */
    KnownCultureCode["NlNl"] = "nl-nl";
    /** PtPt */
    KnownCultureCode["PtPt"] = "pt-pt";
    /** SvSe */
    KnownCultureCode["SvSe"] = "sv-se";
})(exports.KnownCultureCode || (exports.KnownCultureCode = {}));
/** Known values of {@link ChargeSummaryKind} that the service accepts. */
exports.KnownChargeSummaryKind = void 0;
(function (KnownChargeSummaryKind) {
    /** Legacy */
    KnownChargeSummaryKind["Legacy"] = "legacy";
    /** Modern */
    KnownChargeSummaryKind["Modern"] = "modern";
})(exports.KnownChargeSummaryKind || (exports.KnownChargeSummaryKind = {}));
/** Known values of {@link BillingFrequency} that the service accepts. */
exports.KnownBillingFrequency = void 0;
(function (KnownBillingFrequency) {
    /** Month */
    KnownBillingFrequency["Month"] = "Month";
    /** Quarter */
    KnownBillingFrequency["Quarter"] = "Quarter";
    /** Year */
    KnownBillingFrequency["Year"] = "Year";
})(exports.KnownBillingFrequency || (exports.KnownBillingFrequency = {}));
/** Known values of {@link Datagrain} that the service accepts. */
exports.KnownDatagrain = void 0;
(function (KnownDatagrain) {
    /** Daily grain of data */
    KnownDatagrain["DailyGrain"] = "daily";
    /** Monthly grain of data */
    KnownDatagrain["MonthlyGrain"] = "monthly";
})(exports.KnownDatagrain || (exports.KnownDatagrain = {}));
/** Known values of {@link ReservationRecommendationKind} that the service accepts. */
exports.KnownReservationRecommendationKind = void 0;
(function (KnownReservationRecommendationKind) {
    /** Legacy */
    KnownReservationRecommendationKind["Legacy"] = "legacy";
    /** Modern */
    KnownReservationRecommendationKind["Modern"] = "modern";
})(exports.KnownReservationRecommendationKind || (exports.KnownReservationRecommendationKind = {}));
/** Known values of {@link Term} that the service accepts. */
exports.KnownTerm = void 0;
(function (KnownTerm) {
    /** 1 year reservation term */
    KnownTerm["P1Y"] = "P1Y";
    /** 3 year reservation term */
    KnownTerm["P3Y"] = "P3Y";
})(exports.KnownTerm || (exports.KnownTerm = {}));
/** Known values of {@link LookBackPeriod} that the service accepts. */
exports.KnownLookBackPeriod = void 0;
(function (KnownLookBackPeriod) {
    /** Use 7 days of data for recommendations */
    KnownLookBackPeriod["Last07Days"] = "Last7Days";
    /** Use 30 days of data for recommendations */
    KnownLookBackPeriod["Last30Days"] = "Last30Days";
    /** Use 60 days of data for recommendations */
    KnownLookBackPeriod["Last60Days"] = "Last60Days";
})(exports.KnownLookBackPeriod || (exports.KnownLookBackPeriod = {}));
/** Known values of {@link EventType} that the service accepts. */
exports.KnownEventType = void 0;
(function (KnownEventType) {
    /** SettledCharges */
    KnownEventType["SettledCharges"] = "SettledCharges";
    /** PendingCharges */
    KnownEventType["PendingCharges"] = "PendingCharges";
    /** PendingAdjustments */
    KnownEventType["PendingAdjustments"] = "PendingAdjustments";
    /** PendingNewCredit */
    KnownEventType["PendingNewCredit"] = "PendingNewCredit";
    /** PendingExpiredCredit */
    KnownEventType["PendingExpiredCredit"] = "PendingExpiredCredit";
    /** UnKnown */
    KnownEventType["UnKnown"] = "UnKnown";
    /** NewCredit */
    KnownEventType["NewCredit"] = "NewCredit";
})(exports.KnownEventType || (exports.KnownEventType = {}));
/** Known values of {@link LotSource} that the service accepts. */
exports.KnownLotSource = void 0;
(function (KnownLotSource) {
    /** PurchasedCredit */
    KnownLotSource["PurchasedCredit"] = "PurchasedCredit";
    /** PromotionalCredit */
    KnownLotSource["PromotionalCredit"] = "PromotionalCredit";
    /** ConsumptionCommitment */
    KnownLotSource["ConsumptionCommitment"] = "ConsumptionCommitment";
})(exports.KnownLotSource || (exports.KnownLotSource = {}));
/** Known values of {@link Status} that the service accepts. */
exports.KnownStatus = void 0;
(function (KnownStatus) {
    /** None */
    KnownStatus["None"] = "None";
    /** Active */
    KnownStatus["Active"] = "Active";
    /** Inactive */
    KnownStatus["Inactive"] = "Inactive";
    /** Expired */
    KnownStatus["Expired"] = "Expired";
    /** Complete */
    KnownStatus["Complete"] = "Complete";
    /** Canceled */
    KnownStatus["Canceled"] = "Canceled";
})(exports.KnownStatus || (exports.KnownStatus = {}));
/** Known values of {@link PricingModelType} that the service accepts. */
exports.KnownPricingModelType = void 0;
(function (KnownPricingModelType) {
    /** OnDemand */
    KnownPricingModelType["OnDemand"] = "On Demand";
    /** Reservation */
    KnownPricingModelType["Reservation"] = "Reservation";
    /** Spot */
    KnownPricingModelType["Spot"] = "Spot";
})(exports.KnownPricingModelType || (exports.KnownPricingModelType = {}));
/** Known values of {@link Scope} that the service accepts. */
exports.KnownScope = void 0;
(function (KnownScope) {
    /** Single */
    KnownScope["Single"] = "Single";
    /** Shared */
    KnownScope["Shared"] = "Shared";
})(exports.KnownScope || (exports.KnownScope = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const UsageDetailsListResult = {
    type: {
        name: "Composite",
        className: "UsageDetailsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UsageDetail"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetails"
                }
            }
        }
    }
};
const ErrorDetails = {
    type: {
        name: "Composite",
        className: "ErrorDetails",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MarketplacesListResult = {
    type: {
        name: "Composite",
        className: "MarketplacesListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Marketplace"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BudgetsListResult = {
    type: {
        name: "Composite",
        className: "BudgetsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Budget"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BudgetTimePeriod = {
    type: {
        name: "Composite",
        className: "BudgetTimePeriod",
        modelProperties: {
            startDate: {
                serializedName: "startDate",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            endDate: {
                serializedName: "endDate",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const BudgetFilter = {
    type: {
        name: "Composite",
        className: "BudgetFilter",
        modelProperties: {
            and: {
                serializedName: "and",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BudgetFilterProperties"
                        }
                    }
                }
            },
            not: {
                serializedName: "not",
                type: {
                    name: "Composite",
                    className: "BudgetFilterProperties"
                }
            },
            dimensions: {
                serializedName: "dimensions",
                type: {
                    name: "Composite",
                    className: "BudgetComparisonExpression"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Composite",
                    className: "BudgetComparisonExpression"
                }
            }
        }
    }
};
const BudgetFilterProperties = {
    type: {
        name: "Composite",
        className: "BudgetFilterProperties",
        modelProperties: {
            dimensions: {
                serializedName: "dimensions",
                type: {
                    name: "Composite",
                    className: "BudgetComparisonExpression"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Composite",
                    className: "BudgetComparisonExpression"
                }
            }
        }
    }
};
const BudgetComparisonExpression = {
    type: {
        name: "Composite",
        className: "BudgetComparisonExpression",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            values: {
                serializedName: "values",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const CurrentSpend = {
    type: {
        name: "Composite",
        className: "CurrentSpend",
        modelProperties: {
            amount: {
                serializedName: "amount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            unit: {
                serializedName: "unit",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Notification = {
    type: {
        name: "Composite",
        className: "Notification",
        modelProperties: {
            enabled: {
                serializedName: "enabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            threshold: {
                serializedName: "threshold",
                required: true,
                type: {
                    name: "Number"
                }
            },
            contactEmails: {
                constraints: {
                    MaxItems: 50
                },
                serializedName: "contactEmails",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            contactRoles: {
                serializedName: "contactRoles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            contactGroups: {
                constraints: {
                    MaxItems: 50
                },
                serializedName: "contactGroups",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            thresholdType: {
                defaultValue: "Actual",
                serializedName: "thresholdType",
                type: {
                    name: "String"
                }
            },
            locale: {
                serializedName: "locale",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ForecastSpend = {
    type: {
        name: "Composite",
        className: "ForecastSpend",
        modelProperties: {
            amount: {
                serializedName: "amount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            unit: {
                serializedName: "unit",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Tag = {
    type: {
        name: "Composite",
        className: "Tag",
        modelProperties: {
            key: {
                serializedName: "key",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ChargesListResult = {
    type: {
        name: "Composite",
        className: "ChargesListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChargeSummary"
                        }
                    }
                }
            }
        }
    }
};
const BalancePropertiesNewPurchasesDetailsItem = {
    type: {
        name: "Composite",
        className: "BalancePropertiesNewPurchasesDetailsItem",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const BalancePropertiesAdjustmentDetailsItem = {
    type: {
        name: "Composite",
        className: "BalancePropertiesAdjustmentDetailsItem",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ReservationSummariesListResult = {
    type: {
        name: "Composite",
        className: "ReservationSummariesListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationSummary"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationDetailsListResult = {
    type: {
        name: "Composite",
        className: "ReservationDetailsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationDetail"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationRecommendationsListResult = {
    type: {
        name: "Composite",
        className: "ReservationRecommendationsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationRecommendation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            previousLink: {
                serializedName: "previousLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceAttributes = {
    type: {
        name: "Composite",
        className: "ResourceAttributes",
        modelProperties: {
            location: {
                serializedName: "location",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            sku: {
                serializedName: "sku",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationRecommendationDetailsResourceProperties = {
    type: {
        name: "Composite",
        className: "ReservationRecommendationDetailsResourceProperties",
        modelProperties: {
            appliedScopes: {
                serializedName: "appliedScopes",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            onDemandRate: {
                serializedName: "onDemandRate",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            product: {
                serializedName: "product",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            region: {
                serializedName: "region",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            reservationRate: {
                serializedName: "reservationRate",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationRecommendationDetailsSavingsProperties = {
    type: {
        name: "Composite",
        className: "ReservationRecommendationDetailsSavingsProperties",
        modelProperties: {
            calculatedSavings: {
                serializedName: "calculatedSavings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationRecommendationDetailsCalculatedSavingsProperties"
                        }
                    }
                }
            },
            lookBackPeriod: {
                serializedName: "lookBackPeriod",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            recommendedQuantity: {
                serializedName: "recommendedQuantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            reservationOrderTerm: {
                serializedName: "reservationOrderTerm",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            savingsType: {
                serializedName: "savingsType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            unitOfMeasure: {
                serializedName: "unitOfMeasure",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationRecommendationDetailsCalculatedSavingsProperties = {
    type: {
        name: "Composite",
        className: "ReservationRecommendationDetailsCalculatedSavingsProperties",
        modelProperties: {
            onDemandCost: {
                serializedName: "onDemandCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            overageCost: {
                serializedName: "overageCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            quantity: {
                serializedName: "quantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            reservationCost: {
                serializedName: "reservationCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalReservationCost: {
                serializedName: "totalReservationCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            reservedUnitCount: {
                serializedName: "reservedUnitCount",
                type: {
                    name: "Number"
                }
            },
            savings: {
                serializedName: "savings",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ReservationRecommendationDetailsUsageProperties = {
    type: {
        name: "Composite",
        className: "ReservationRecommendationDetailsUsageProperties",
        modelProperties: {
            firstConsumptionDate: {
                serializedName: "firstConsumptionDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastConsumptionDate: {
                serializedName: "lastConsumptionDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lookBackUnitType: {
                serializedName: "lookBackUnitType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            usageData: {
                serializedName: "usageData",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            usageGrain: {
                serializedName: "usageGrain",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HighCasedErrorResponse = {
    type: {
        name: "Composite",
        className: "HighCasedErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "HighCasedErrorDetails"
                }
            }
        }
    }
};
const HighCasedErrorDetails = {
    type: {
        name: "Composite",
        className: "HighCasedErrorDetails",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationTransactionsListResult = {
    type: {
        name: "Composite",
        className: "ReservationTransactionsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationTransaction"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationTransactionResource = {
    type: {
        name: "Composite",
        className: "ReservationTransactionResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ModernReservationTransactionsListResult = {
    type: {
        name: "Composite",
        className: "ModernReservationTransactionsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ModernReservationTransaction"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PriceSheetProperties = {
    type: {
        name: "Composite",
        className: "PriceSheetProperties",
        modelProperties: {
            billingPeriodId: {
                serializedName: "billingPeriodId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            meterId: {
                serializedName: "meterId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            meterDetails: {
                serializedName: "meterDetails",
                type: {
                    name: "Composite",
                    className: "MeterDetails"
                }
            },
            unitOfMeasure: {
                serializedName: "unitOfMeasure",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            includedQuantity: {
                serializedName: "includedQuantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            partNumber: {
                serializedName: "partNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            unitPrice: {
                serializedName: "unitPrice",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            currencyCode: {
                serializedName: "currencyCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            offerId: {
                serializedName: "offerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MeterDetails = {
    type: {
        name: "Composite",
        className: "MeterDetails",
        modelProperties: {
            meterName: {
                serializedName: "meterName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            meterCategory: {
                serializedName: "meterCategory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            meterSubCategory: {
                serializedName: "meterSubCategory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            meterLocation: {
                serializedName: "meterLocation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            totalIncludedQuantity: {
                serializedName: "totalIncludedQuantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            pretaxStandardRate: {
                serializedName: "pretaxStandardRate",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            serviceName: {
                serializedName: "serviceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            serviceTier: {
                serializedName: "serviceTier",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Events = {
    type: {
        name: "Composite",
        className: "Events",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EventSummary"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Amount = {
    type: {
        name: "Composite",
        className: "Amount",
        modelProperties: {
            currency: {
                serializedName: "currency",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Reseller = {
    type: {
        name: "Composite",
        className: "Reseller",
        modelProperties: {
            resellerId: {
                serializedName: "resellerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resellerDescription: {
                serializedName: "resellerDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Lots = {
    type: {
        name: "Composite",
        className: "Lots",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LotSummary"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CreditBalanceSummary = {
    type: {
        name: "Composite",
        className: "CreditBalanceSummary",
        modelProperties: {
            estimatedBalance: {
                serializedName: "estimatedBalance",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            },
            currentBalance: {
                serializedName: "currentBalance",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            },
            estimatedBalanceInBillingCurrency: {
                serializedName: "estimatedBalanceInBillingCurrency",
                type: {
                    name: "Composite",
                    className: "AmountWithExchangeRate"
                }
            }
        }
    }
};
const MeterDetailsResponse = {
    type: {
        name: "Composite",
        className: "MeterDetailsResponse",
        modelProperties: {
            meterName: {
                serializedName: "meterName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            meterCategory: {
                serializedName: "meterCategory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            meterSubCategory: {
                serializedName: "meterSubCategory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            unitOfMeasure: {
                serializedName: "unitOfMeasure",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            serviceFamily: {
                serializedName: "serviceFamily",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LegacyReservationRecommendationProperties = {
    type: {
        name: "Composite",
        className: "LegacyReservationRecommendationProperties",
        uberParent: "LegacyReservationRecommendationProperties",
        polymorphicDiscriminator: {
            serializedName: "scope",
            clientName: "scope"
        },
        modelProperties: {
            lookBackPeriod: {
                serializedName: "lookBackPeriod",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            instanceFlexibilityRatio: {
                serializedName: "instanceFlexibilityRatio",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            instanceFlexibilityGroup: {
                serializedName: "instanceFlexibilityGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            normalizedSize: {
                serializedName: "normalizedSize",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            recommendedQuantityNormalized: {
                serializedName: "recommendedQuantityNormalized",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            meterId: {
                serializedName: "meterId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            term: {
                serializedName: "term",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            costWithNoReservedInstances: {
                serializedName: "costWithNoReservedInstances",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            recommendedQuantity: {
                serializedName: "recommendedQuantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalCostWithReservedInstances: {
                serializedName: "totalCostWithReservedInstances",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            netSavings: {
                serializedName: "netSavings",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            firstUsageDate: {
                serializedName: "firstUsageDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            scope: {
                serializedName: "scope",
                required: true,
                type: {
                    name: "String"
                }
            },
            skuProperties: {
                serializedName: "skuProperties",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuProperty"
                        }
                    }
                }
            }
        }
    }
};
const SkuProperty = {
    type: {
        name: "Composite",
        className: "SkuProperty",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DownloadProperties = {
    type: {
        name: "Composite",
        className: "DownloadProperties",
        modelProperties: {
            downloadUrl: {
                serializedName: "downloadUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            validTill: {
                serializedName: "validTill",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UsageDetail = {
    serializedName: "UsageDetail",
    type: {
        name: "Composite",
        className: "UsageDetail",
        uberParent: "Resource",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Marketplace = {
    type: {
        name: "Composite",
        className: "Marketplace",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { billingPeriodId: {
                serializedName: "properties.billingPeriodId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, usageStart: {
                serializedName: "properties.usageStart",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, usageEnd: {
                serializedName: "properties.usageEnd",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, resourceRate: {
                serializedName: "properties.resourceRate",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, offerName: {
                serializedName: "properties.offerName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceGroup: {
                serializedName: "properties.resourceGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, additionalInfo: {
                serializedName: "properties.additionalInfo",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, orderNumber: {
                serializedName: "properties.orderNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, instanceName: {
                serializedName: "properties.instanceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, instanceId: {
                serializedName: "properties.instanceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, currency: {
                serializedName: "properties.currency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, consumedQuantity: {
                serializedName: "properties.consumedQuantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, unitOfMeasure: {
                serializedName: "properties.unitOfMeasure",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, pretaxCost: {
                serializedName: "properties.pretaxCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, isEstimated: {
                serializedName: "properties.isEstimated",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, meterId: {
                serializedName: "properties.meterId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, subscriptionGuid: {
                serializedName: "properties.subscriptionGuid",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, subscriptionName: {
                serializedName: "properties.subscriptionName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accountName: {
                serializedName: "properties.accountName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, departmentName: {
                serializedName: "properties.departmentName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, consumedService: {
                serializedName: "properties.consumedService",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, costCenter: {
                serializedName: "properties.costCenter",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, additionalProperties: {
                serializedName: "properties.additionalProperties",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, publisherName: {
                serializedName: "properties.publisherName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, planName: {
                serializedName: "properties.planName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isRecurringCharge: {
                serializedName: "properties.isRecurringCharge",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const Balance = {
    type: {
        name: "Composite",
        className: "Balance",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { currency: {
                serializedName: "properties.currency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, beginningBalance: {
                serializedName: "properties.beginningBalance",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, endingBalance: {
                serializedName: "properties.endingBalance",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, newPurchases: {
                serializedName: "properties.newPurchases",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, adjustments: {
                serializedName: "properties.adjustments",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, utilized: {
                serializedName: "properties.utilized",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, serviceOverage: {
                serializedName: "properties.serviceOverage",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, chargesBilledSeparately: {
                serializedName: "properties.chargesBilledSeparately",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, totalOverage: {
                serializedName: "properties.totalOverage",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, totalUsage: {
                serializedName: "properties.totalUsage",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, azureMarketplaceServiceCharges: {
                serializedName: "properties.azureMarketplaceServiceCharges",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, billingFrequency: {
                serializedName: "properties.billingFrequency",
                type: {
                    name: "String"
                }
            }, priceHidden: {
                serializedName: "properties.priceHidden",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, newPurchasesDetails: {
                serializedName: "properties.newPurchasesDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BalancePropertiesNewPurchasesDetailsItem"
                        }
                    }
                }
            }, adjustmentDetails: {
                serializedName: "properties.adjustmentDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BalancePropertiesAdjustmentDetailsItem"
                        }
                    }
                }
            } })
    }
};
const ReservationSummary = {
    type: {
        name: "Composite",
        className: "ReservationSummary",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { reservationOrderId: {
                serializedName: "properties.reservationOrderId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reservationId: {
                serializedName: "properties.reservationId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, skuName: {
                serializedName: "properties.skuName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reservedHours: {
                serializedName: "properties.reservedHours",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, usageDate: {
                serializedName: "properties.usageDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, usedHours: {
                serializedName: "properties.usedHours",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, minUtilizationPercentage: {
                serializedName: "properties.minUtilizationPercentage",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, avgUtilizationPercentage: {
                serializedName: "properties.avgUtilizationPercentage",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, maxUtilizationPercentage: {
                serializedName: "properties.maxUtilizationPercentage",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, kind: {
                serializedName: "properties.kind",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, purchasedQuantity: {
                serializedName: "properties.purchasedQuantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, remainingQuantity: {
                serializedName: "properties.remainingQuantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, totalReservedQuantity: {
                serializedName: "properties.totalReservedQuantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, usedQuantity: {
                serializedName: "properties.usedQuantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, utilizedPercentage: {
                serializedName: "properties.utilizedPercentage",
                readOnly: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const ReservationDetail = {
    type: {
        name: "Composite",
        className: "ReservationDetail",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { reservationOrderId: {
                serializedName: "properties.reservationOrderId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, instanceFlexibilityRatio: {
                serializedName: "properties.instanceFlexibilityRatio",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, instanceFlexibilityGroup: {
                serializedName: "properties.instanceFlexibilityGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reservationId: {
                serializedName: "properties.reservationId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, skuName: {
                serializedName: "properties.skuName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reservedHours: {
                serializedName: "properties.reservedHours",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, usageDate: {
                serializedName: "properties.usageDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, usedHours: {
                serializedName: "properties.usedHours",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, instanceId: {
                serializedName: "properties.instanceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, totalReservedQuantity: {
                serializedName: "properties.totalReservedQuantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, kind: {
                serializedName: "properties.kind",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ReservationRecommendation = {
    serializedName: "ReservationRecommendation",
    type: {
        name: "Composite",
        className: "ReservationRecommendation",
        uberParent: "Resource",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign(Object.assign({}, Resource.type.modelProperties), ResourceAttributes.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ReservationRecommendationDetailsModel = {
    type: {
        name: "Composite",
        className: "ReservationRecommendationDetailsModel",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "String"
                }
            }, currency: {
                serializedName: "properties.currency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resource: {
                serializedName: "properties.resource",
                type: {
                    name: "Composite",
                    className: "ReservationRecommendationDetailsResourceProperties"
                }
            }, resourceGroup: {
                serializedName: "properties.resourceGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, savings: {
                serializedName: "properties.savings",
                type: {
                    name: "Composite",
                    className: "ReservationRecommendationDetailsSavingsProperties"
                }
            }, scope: {
                serializedName: "properties.scope",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, usage: {
                serializedName: "properties.usage",
                type: {
                    name: "Composite",
                    className: "ReservationRecommendationDetailsUsageProperties"
                }
            } })
    }
};
const PriceSheetResult = {
    type: {
        name: "Composite",
        className: "PriceSheetResult",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { pricesheets: {
                serializedName: "properties.pricesheets",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PriceSheetProperties"
                        }
                    }
                }
            }, nextLink: {
                serializedName: "properties.nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, download: {
                serializedName: "properties.download",
                type: {
                    name: "Composite",
                    className: "MeterDetails"
                }
            } })
    }
};
const ManagementGroupAggregatedCostResult = {
    type: {
        name: "Composite",
        className: "ManagementGroupAggregatedCostResult",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { billingPeriodId: {
                serializedName: "properties.billingPeriodId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, usageStart: {
                serializedName: "properties.usageStart",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, usageEnd: {
                serializedName: "properties.usageEnd",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, azureCharges: {
                serializedName: "properties.azureCharges",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, marketplaceCharges: {
                serializedName: "properties.marketplaceCharges",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, chargesBilledSeparately: {
                serializedName: "properties.chargesBilledSeparately",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, currency: {
                serializedName: "properties.currency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, children: {
                serializedName: "properties.children",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagementGroupAggregatedCostResult"
                        }
                    }
                }
            }, includedSubscriptions: {
                serializedName: "properties.includedSubscriptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, excludedSubscriptions: {
                serializedName: "properties.excludedSubscriptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const CreditSummary = {
    type: {
        name: "Composite",
        className: "CreditSummary",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { balanceSummary: {
                serializedName: "properties.balanceSummary",
                type: {
                    name: "Composite",
                    className: "CreditBalanceSummary"
                }
            }, pendingCreditAdjustments: {
                serializedName: "properties.pendingCreditAdjustments",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, expiredCredit: {
                serializedName: "properties.expiredCredit",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, pendingEligibleCharges: {
                serializedName: "properties.pendingEligibleCharges",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, creditCurrency: {
                serializedName: "properties.creditCurrency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingCurrency: {
                serializedName: "properties.billingCurrency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reseller: {
                serializedName: "properties.reseller",
                type: {
                    name: "Composite",
                    className: "Reseller"
                }
            }, eTag: {
                serializedName: "properties.eTag",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Budget = {
    type: {
        name: "Composite",
        className: "Budget",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { category: {
                serializedName: "properties.category",
                type: {
                    name: "String"
                }
            }, amount: {
                serializedName: "properties.amount",
                type: {
                    name: "Number"
                }
            }, timeGrain: {
                serializedName: "properties.timeGrain",
                type: {
                    name: "String"
                }
            }, timePeriod: {
                serializedName: "properties.timePeriod",
                type: {
                    name: "Composite",
                    className: "BudgetTimePeriod"
                }
            }, filter: {
                serializedName: "properties.filter",
                type: {
                    name: "Composite",
                    className: "BudgetFilter"
                }
            }, currentSpend: {
                serializedName: "properties.currentSpend",
                type: {
                    name: "Composite",
                    className: "CurrentSpend"
                }
            }, notifications: {
                serializedName: "properties.notifications",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "Notification" } }
                }
            }, forecastSpend: {
                serializedName: "properties.forecastSpend",
                type: {
                    name: "Composite",
                    className: "ForecastSpend"
                }
            } })
    }
};
const TagsResult = {
    type: {
        name: "Composite",
        className: "TagsResult",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { tags: {
                serializedName: "properties.tags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Tag"
                        }
                    }
                }
            }, nextLink: {
                serializedName: "properties.nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, previousLink: {
                serializedName: "properties.previousLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ChargeSummary = {
    serializedName: "ChargeSummary",
    type: {
        name: "Composite",
        className: "ChargeSummary",
        uberParent: "ProxyResource",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const EventSummary = {
    type: {
        name: "Composite",
        className: "EventSummary",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { transactionDate: {
                serializedName: "properties.transactionDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, newCredit: {
                serializedName: "properties.newCredit",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, adjustments: {
                serializedName: "properties.adjustments",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, creditExpired: {
                serializedName: "properties.creditExpired",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, charges: {
                serializedName: "properties.charges",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, closedBalance: {
                serializedName: "properties.closedBalance",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, eventType: {
                serializedName: "properties.eventType",
                type: {
                    name: "String"
                }
            }, invoiceNumber: {
                serializedName: "properties.invoiceNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileDisplayName: {
                serializedName: "properties.billingProfileDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, lotId: {
                serializedName: "properties.lotId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, lotSource: {
                serializedName: "properties.lotSource",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, canceledCredit: {
                serializedName: "properties.canceledCredit",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, creditCurrency: {
                serializedName: "properties.creditCurrency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingCurrency: {
                serializedName: "properties.billingCurrency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reseller: {
                serializedName: "properties.reseller",
                type: {
                    name: "Composite",
                    className: "Reseller"
                }
            }, creditExpiredInBillingCurrency: {
                serializedName: "properties.creditExpiredInBillingCurrency",
                type: {
                    name: "Composite",
                    className: "AmountWithExchangeRate"
                }
            }, newCreditInBillingCurrency: {
                serializedName: "properties.newCreditInBillingCurrency",
                type: {
                    name: "Composite",
                    className: "AmountWithExchangeRate"
                }
            }, adjustmentsInBillingCurrency: {
                serializedName: "properties.adjustmentsInBillingCurrency",
                type: {
                    name: "Composite",
                    className: "AmountWithExchangeRate"
                }
            }, chargesInBillingCurrency: {
                serializedName: "properties.chargesInBillingCurrency",
                type: {
                    name: "Composite",
                    className: "AmountWithExchangeRate"
                }
            }, closedBalanceInBillingCurrency: {
                serializedName: "properties.closedBalanceInBillingCurrency",
                type: {
                    name: "Composite",
                    className: "AmountWithExchangeRate"
                }
            }, eTagPropertiesETag: {
                serializedName: "properties.eTag",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const LotSummary = {
    type: {
        name: "Composite",
        className: "LotSummary",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { originalAmount: {
                serializedName: "properties.originalAmount",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, closedBalance: {
                serializedName: "properties.closedBalance",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, source: {
                serializedName: "properties.source",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, startDate: {
                serializedName: "properties.startDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, expirationDate: {
                serializedName: "properties.expirationDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, poNumber: {
                serializedName: "properties.poNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, purchasedDate: {
                serializedName: "properties.purchasedDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creditCurrency: {
                serializedName: "properties.creditCurrency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingCurrency: {
                serializedName: "properties.billingCurrency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, originalAmountInBillingCurrency: {
                serializedName: "properties.originalAmountInBillingCurrency",
                type: {
                    name: "Composite",
                    className: "AmountWithExchangeRate"
                }
            }, closedBalanceInBillingCurrency: {
                serializedName: "properties.closedBalanceInBillingCurrency",
                type: {
                    name: "Composite",
                    className: "AmountWithExchangeRate"
                }
            }, reseller: {
                serializedName: "properties.reseller",
                type: {
                    name: "Composite",
                    className: "Reseller"
                }
            }, eTagPropertiesETag: {
                serializedName: "properties.eTag",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ReservationTransaction = {
    type: {
        name: "Composite",
        className: "ReservationTransaction",
        modelProperties: Object.assign(Object.assign({}, ReservationTransactionResource.type.modelProperties), { eventDate: {
                serializedName: "properties.eventDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, reservationOrderId: {
                serializedName: "properties.reservationOrderId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, eventType: {
                serializedName: "properties.eventType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, quantity: {
                serializedName: "properties.quantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, amount: {
                serializedName: "properties.amount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, currency: {
                serializedName: "properties.currency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reservationOrderName: {
                serializedName: "properties.reservationOrderName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, purchasingEnrollment: {
                serializedName: "properties.purchasingEnrollment",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, purchasingSubscriptionGuid: {
                serializedName: "properties.purchasingSubscriptionGuid",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, purchasingSubscriptionName: {
                serializedName: "properties.purchasingSubscriptionName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, armSkuName: {
                serializedName: "properties.armSkuName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, term: {
                serializedName: "properties.term",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, region: {
                serializedName: "properties.region",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accountName: {
                serializedName: "properties.accountName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accountOwnerEmail: {
                serializedName: "properties.accountOwnerEmail",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, departmentName: {
                serializedName: "properties.departmentName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, costCenter: {
                serializedName: "properties.costCenter",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, currentEnrollment: {
                serializedName: "properties.currentEnrollment",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingFrequency: {
                serializedName: "properties.billingFrequency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingMonth: {
                serializedName: "properties.billingMonth",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, monetaryCommitment: {
                serializedName: "properties.monetaryCommitment",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, overage: {
                serializedName: "properties.overage",
                readOnly: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const ModernReservationTransaction = {
    serializedName: "Modern",
    type: {
        name: "Composite",
        className: "ModernReservationTransaction",
        modelProperties: Object.assign(Object.assign({}, ReservationTransactionResource.type.modelProperties), { amount: {
                serializedName: "properties.amount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, armSkuName: {
                serializedName: "properties.armSkuName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingFrequency: {
                serializedName: "properties.billingFrequency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileName: {
                serializedName: "properties.billingProfileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, currency: {
                serializedName: "properties.currency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, eventDate: {
                serializedName: "properties.eventDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, eventType: {
                serializedName: "properties.eventType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoice: {
                serializedName: "properties.invoice",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceId: {
                serializedName: "properties.invoiceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceSectionId: {
                serializedName: "properties.invoiceSectionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceSectionName: {
                serializedName: "properties.invoiceSectionName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, purchasingSubscriptionGuid: {
                serializedName: "properties.purchasingSubscriptionGuid",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, purchasingSubscriptionName: {
                serializedName: "properties.purchasingSubscriptionName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, quantity: {
                serializedName: "properties.quantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, region: {
                serializedName: "properties.region",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reservationOrderId: {
                serializedName: "properties.reservationOrderId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reservationOrderName: {
                serializedName: "properties.reservationOrderName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, term: {
                serializedName: "properties.term",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AmountWithExchangeRate = {
    type: {
        name: "Composite",
        className: "AmountWithExchangeRate",
        modelProperties: Object.assign(Object.assign({}, Amount.type.modelProperties), { exchangeRate: {
                serializedName: "exchangeRate",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, exchangeRateMonth: {
                serializedName: "exchangeRateMonth",
                readOnly: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const LegacySingleScopeReservationRecommendationProperties = {
    serializedName: "Single",
    type: {
        name: "Composite",
        className: "LegacySingleScopeReservationRecommendationProperties",
        uberParent: "LegacyReservationRecommendationProperties",
        polymorphicDiscriminator: LegacyReservationRecommendationProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LegacyReservationRecommendationProperties.type.modelProperties), { subscriptionId: {
                serializedName: "subscriptionId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            } })
    }
};
const LegacySharedScopeReservationRecommendationProperties = {
    serializedName: "Shared",
    type: {
        name: "Composite",
        className: "LegacySharedScopeReservationRecommendationProperties",
        uberParent: "LegacyReservationRecommendationProperties",
        polymorphicDiscriminator: LegacyReservationRecommendationProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, LegacyReservationRecommendationProperties.type.modelProperties)
    }
};
const LegacyUsageDetail = {
    serializedName: "legacy",
    type: {
        name: "Composite",
        className: "LegacyUsageDetail",
        uberParent: "UsageDetail",
        polymorphicDiscriminator: UsageDetail.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UsageDetail.type.modelProperties), { billingAccountId: {
                serializedName: "properties.billingAccountId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingAccountName: {
                serializedName: "properties.billingAccountName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingPeriodStartDate: {
                serializedName: "properties.billingPeriodStartDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, billingPeriodEndDate: {
                serializedName: "properties.billingPeriodEndDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileName: {
                serializedName: "properties.billingProfileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accountOwnerId: {
                serializedName: "properties.accountOwnerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accountName: {
                serializedName: "properties.accountName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subscriptionId: {
                serializedName: "properties.subscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subscriptionName: {
                serializedName: "properties.subscriptionName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, date: {
                serializedName: "properties.date",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, product: {
                serializedName: "properties.product",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, partNumber: {
                serializedName: "properties.partNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, meterId: {
                serializedName: "properties.meterId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, meterDetails: {
                serializedName: "properties.meterDetails",
                type: {
                    name: "Composite",
                    className: "MeterDetailsResponse"
                }
            }, quantity: {
                serializedName: "properties.quantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, effectivePrice: {
                serializedName: "properties.effectivePrice",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, cost: {
                serializedName: "properties.cost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, unitPrice: {
                serializedName: "properties.unitPrice",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, billingCurrency: {
                serializedName: "properties.billingCurrency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceLocation: {
                serializedName: "properties.resourceLocation",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, consumedService: {
                serializedName: "properties.consumedService",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceId: {
                serializedName: "properties.resourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceName: {
                serializedName: "properties.resourceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, serviceInfo1: {
                serializedName: "properties.serviceInfo1",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, serviceInfo2: {
                serializedName: "properties.serviceInfo2",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, additionalInfo: {
                serializedName: "properties.additionalInfo",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceSection: {
                serializedName: "properties.invoiceSection",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, costCenter: {
                serializedName: "properties.costCenter",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceGroup: {
                serializedName: "properties.resourceGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reservationId: {
                serializedName: "properties.reservationId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reservationName: {
                serializedName: "properties.reservationName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productOrderId: {
                serializedName: "properties.productOrderId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productOrderName: {
                serializedName: "properties.productOrderName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, offerId: {
                serializedName: "properties.offerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isAzureCreditEligible: {
                serializedName: "properties.isAzureCreditEligible",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, term: {
                serializedName: "properties.term",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, publisherName: {
                serializedName: "properties.publisherName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, publisherType: {
                serializedName: "properties.publisherType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, planName: {
                serializedName: "properties.planName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, chargeType: {
                serializedName: "properties.chargeType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, frequency: {
                serializedName: "properties.frequency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, payGPrice: {
                serializedName: "properties.payGPrice",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, pricingModel: {
                serializedName: "properties.pricingModel",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ModernUsageDetail = {
    serializedName: "modern",
    type: {
        name: "Composite",
        className: "ModernUsageDetail",
        uberParent: "UsageDetail",
        polymorphicDiscriminator: UsageDetail.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UsageDetail.type.modelProperties), { billingAccountId: {
                serializedName: "properties.billingAccountId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, effectivePrice: {
                serializedName: "properties.effectivePrice",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, pricingModel: {
                serializedName: "properties.pricingModel",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingAccountName: {
                serializedName: "properties.billingAccountName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingPeriodStartDate: {
                serializedName: "properties.billingPeriodStartDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, billingPeriodEndDate: {
                serializedName: "properties.billingPeriodEndDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileName: {
                serializedName: "properties.billingProfileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subscriptionGuid: {
                serializedName: "properties.subscriptionGuid",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subscriptionName: {
                serializedName: "properties.subscriptionName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, date: {
                serializedName: "properties.date",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, product: {
                serializedName: "properties.product",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, meterId: {
                serializedName: "properties.meterId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, meterName: {
                serializedName: "properties.meterName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, meterRegion: {
                serializedName: "properties.meterRegion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, meterCategory: {
                serializedName: "properties.meterCategory",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, meterSubCategory: {
                serializedName: "properties.meterSubCategory",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, serviceFamily: {
                serializedName: "properties.serviceFamily",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, quantity: {
                serializedName: "properties.quantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, unitOfMeasure: {
                serializedName: "properties.unitOfMeasure",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, instanceName: {
                serializedName: "properties.instanceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, costInUSD: {
                serializedName: "properties.costInUSD",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, unitPrice: {
                serializedName: "properties.unitPrice",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, billingCurrencyCode: {
                serializedName: "properties.billingCurrencyCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceLocation: {
                serializedName: "properties.resourceLocation",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, consumedService: {
                serializedName: "properties.consumedService",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, serviceInfo1: {
                serializedName: "properties.serviceInfo1",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, serviceInfo2: {
                serializedName: "properties.serviceInfo2",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, additionalInfo: {
                serializedName: "properties.additionalInfo",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceSectionId: {
                serializedName: "properties.invoiceSectionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceSectionName: {
                serializedName: "properties.invoiceSectionName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, costCenter: {
                serializedName: "properties.costCenter",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceGroup: {
                serializedName: "properties.resourceGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reservationId: {
                serializedName: "properties.reservationId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reservationName: {
                serializedName: "properties.reservationName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productOrderId: {
                serializedName: "properties.productOrderId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productOrderName: {
                serializedName: "properties.productOrderName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isAzureCreditEligible: {
                serializedName: "properties.isAzureCreditEligible",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, term: {
                serializedName: "properties.term",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, publisherName: {
                serializedName: "properties.publisherName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, publisherType: {
                serializedName: "properties.publisherType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, chargeType: {
                serializedName: "properties.chargeType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, frequency: {
                serializedName: "properties.frequency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, costInBillingCurrency: {
                serializedName: "properties.costInBillingCurrency",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, costInPricingCurrency: {
                serializedName: "properties.costInPricingCurrency",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, exchangeRate: {
                serializedName: "properties.exchangeRate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, exchangeRateDate: {
                serializedName: "properties.exchangeRateDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, invoiceId: {
                serializedName: "properties.invoiceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, previousInvoiceId: {
                serializedName: "properties.previousInvoiceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, pricingCurrencyCode: {
                serializedName: "properties.pricingCurrencyCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productIdentifier: {
                serializedName: "properties.productIdentifier",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceLocationNormalized: {
                serializedName: "properties.resourceLocationNormalized",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, servicePeriodStartDate: {
                serializedName: "properties.servicePeriodStartDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, servicePeriodEndDate: {
                serializedName: "properties.servicePeriodEndDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, customerTenantId: {
                serializedName: "properties.customerTenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerName: {
                serializedName: "properties.customerName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, partnerTenantId: {
                serializedName: "properties.partnerTenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, partnerName: {
                serializedName: "properties.partnerName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resellerMpnId: {
                serializedName: "properties.resellerMpnId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resellerName: {
                serializedName: "properties.resellerName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, publisherId: {
                serializedName: "properties.publisherId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, marketPrice: {
                serializedName: "properties.marketPrice",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, exchangeRatePricingToBilling: {
                serializedName: "properties.exchangeRatePricingToBilling",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, paygCostInBillingCurrency: {
                serializedName: "properties.paygCostInBillingCurrency",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, paygCostInUSD: {
                serializedName: "properties.paygCostInUSD",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, partnerEarnedCreditRate: {
                serializedName: "properties.partnerEarnedCreditRate",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, partnerEarnedCreditApplied: {
                serializedName: "properties.partnerEarnedCreditApplied",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, payGPrice: {
                serializedName: "properties.payGPrice",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, benefitId: {
                serializedName: "properties.benefitId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, benefitName: {
                serializedName: "properties.benefitName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provider: {
                serializedName: "properties.provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, costAllocationRuleName: {
                serializedName: "properties.costAllocationRuleName",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const LegacyReservationRecommendation = {
    serializedName: "legacy",
    type: {
        name: "Composite",
        className: "LegacyReservationRecommendation",
        uberParent: "ReservationRecommendation",
        polymorphicDiscriminator: ReservationRecommendation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReservationRecommendation.type.modelProperties), { lookBackPeriod: {
                serializedName: "properties.lookBackPeriod",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, instanceFlexibilityRatio: {
                serializedName: "properties.instanceFlexibilityRatio",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, instanceFlexibilityGroup: {
                serializedName: "properties.instanceFlexibilityGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, normalizedSize: {
                serializedName: "properties.normalizedSize",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, recommendedQuantityNormalized: {
                serializedName: "properties.recommendedQuantityNormalized",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, meterId: {
                serializedName: "properties.meterId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, resourceType: {
                serializedName: "properties.resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, term: {
                serializedName: "properties.term",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, costWithNoReservedInstances: {
                serializedName: "properties.costWithNoReservedInstances",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, recommendedQuantity: {
                serializedName: "properties.recommendedQuantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, totalCostWithReservedInstances: {
                serializedName: "properties.totalCostWithReservedInstances",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, netSavings: {
                serializedName: "properties.netSavings",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, firstUsageDate: {
                serializedName: "properties.firstUsageDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, scope: {
                serializedName: "properties.scope",
                required: true,
                type: {
                    name: "String"
                }
            }, skuProperties: {
                serializedName: "properties.skuProperties",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuProperty"
                        }
                    }
                }
            } })
    }
};
const ModernReservationRecommendation = {
    serializedName: "modern",
    type: {
        name: "Composite",
        className: "ModernReservationRecommendation",
        uberParent: "ReservationRecommendation",
        polymorphicDiscriminator: ReservationRecommendation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReservationRecommendation.type.modelProperties), { locationPropertiesLocation: {
                serializedName: "properties.location",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, lookBackPeriod: {
                serializedName: "properties.lookBackPeriod",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, instanceFlexibilityRatio: {
                serializedName: "properties.instanceFlexibilityRatio",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, instanceFlexibilityGroup: {
                serializedName: "properties.instanceFlexibilityGroup",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, normalizedSize: {
                serializedName: "properties.normalizedSize",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, recommendedQuantityNormalized: {
                serializedName: "properties.recommendedQuantityNormalized",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, meterId: {
                serializedName: "properties.meterId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, term: {
                serializedName: "properties.term",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, costWithNoReservedInstances: {
                serializedName: "properties.costWithNoReservedInstances",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, recommendedQuantity: {
                serializedName: "properties.recommendedQuantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, totalCostWithReservedInstances: {
                serializedName: "properties.totalCostWithReservedInstances",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, netSavings: {
                serializedName: "properties.netSavings",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, firstUsageDate: {
                serializedName: "properties.firstUsageDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, scope: {
                serializedName: "properties.scope",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, skuProperties: {
                serializedName: "properties.skuProperties",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuProperty"
                        }
                    }
                }
            }, skuName: {
                serializedName: "properties.skuName",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const LegacyChargeSummary = {
    serializedName: "legacy",
    type: {
        name: "Composite",
        className: "LegacyChargeSummary",
        uberParent: "ChargeSummary",
        polymorphicDiscriminator: ChargeSummary.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChargeSummary.type.modelProperties), { billingPeriodId: {
                serializedName: "properties.billingPeriodId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, usageStart: {
                serializedName: "properties.usageStart",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, usageEnd: {
                serializedName: "properties.usageEnd",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, azureCharges: {
                serializedName: "properties.azureCharges",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, chargesBilledSeparately: {
                serializedName: "properties.chargesBilledSeparately",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, marketplaceCharges: {
                serializedName: "properties.marketplaceCharges",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, currency: {
                serializedName: "properties.currency",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ModernChargeSummary = {
    serializedName: "modern",
    type: {
        name: "Composite",
        className: "ModernChargeSummary",
        uberParent: "ChargeSummary",
        polymorphicDiscriminator: ChargeSummary.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChargeSummary.type.modelProperties), { billingPeriodId: {
                serializedName: "properties.billingPeriodId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, usageStart: {
                serializedName: "properties.usageStart",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, usageEnd: {
                serializedName: "properties.usageEnd",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, azureCharges: {
                serializedName: "properties.azureCharges",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, chargesBilledSeparately: {
                serializedName: "properties.chargesBilledSeparately",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, marketplaceCharges: {
                serializedName: "properties.marketplaceCharges",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, billingAccountId: {
                serializedName: "properties.billingAccountId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceSectionId: {
                serializedName: "properties.invoiceSectionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerId: {
                serializedName: "properties.customerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isInvoiced: {
                serializedName: "properties.isInvoiced",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const LegacyReservationTransaction = {
    type: {
        name: "Composite",
        className: "LegacyReservationTransaction",
        modelProperties: Object.assign({}, ReservationTransaction.type.modelProperties)
    }
};
let discriminators = {
    LegacyReservationRecommendationProperties: LegacyReservationRecommendationProperties,
    "Resource.UsageDetail": UsageDetail,
    "Resource.ReservationRecommendation": ReservationRecommendation,
    "ProxyResource.ChargeSummary": ChargeSummary,
    "LegacyReservationRecommendationProperties.Single": LegacySingleScopeReservationRecommendationProperties,
    "LegacyReservationRecommendationProperties.Shared": LegacySharedScopeReservationRecommendationProperties,
    "UsageDetail.legacy": LegacyUsageDetail,
    "UsageDetail.modern": ModernUsageDetail,
    "ReservationRecommendation.legacy": LegacyReservationRecommendation,
    "ReservationRecommendation.modern": ModernReservationRecommendation,
    "ChargeSummary.legacy": LegacyChargeSummary,
    "ChargeSummary.modern": ModernChargeSummary
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    UsageDetailsListResult: UsageDetailsListResult,
    Resource: Resource,
    ErrorResponse: ErrorResponse,
    ErrorDetails: ErrorDetails,
    MarketplacesListResult: MarketplacesListResult,
    BudgetsListResult: BudgetsListResult,
    BudgetTimePeriod: BudgetTimePeriod,
    BudgetFilter: BudgetFilter,
    BudgetFilterProperties: BudgetFilterProperties,
    BudgetComparisonExpression: BudgetComparisonExpression,
    CurrentSpend: CurrentSpend,
    Notification: Notification,
    ForecastSpend: ForecastSpend,
    ProxyResource: ProxyResource,
    Tag: Tag,
    ChargesListResult: ChargesListResult,
    BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
    BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
    ReservationSummariesListResult: ReservationSummariesListResult,
    ReservationDetailsListResult: ReservationDetailsListResult,
    ReservationRecommendationsListResult: ReservationRecommendationsListResult,
    ResourceAttributes: ResourceAttributes,
    ReservationRecommendationDetailsResourceProperties: ReservationRecommendationDetailsResourceProperties,
    ReservationRecommendationDetailsSavingsProperties: ReservationRecommendationDetailsSavingsProperties,
    ReservationRecommendationDetailsCalculatedSavingsProperties: ReservationRecommendationDetailsCalculatedSavingsProperties,
    ReservationRecommendationDetailsUsageProperties: ReservationRecommendationDetailsUsageProperties,
    HighCasedErrorResponse: HighCasedErrorResponse,
    HighCasedErrorDetails: HighCasedErrorDetails,
    ReservationTransactionsListResult: ReservationTransactionsListResult,
    ReservationTransactionResource: ReservationTransactionResource,
    ModernReservationTransactionsListResult: ModernReservationTransactionsListResult,
    PriceSheetProperties: PriceSheetProperties,
    MeterDetails: MeterDetails,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    Events: Events,
    Amount: Amount,
    Reseller: Reseller,
    Lots: Lots,
    CreditBalanceSummary: CreditBalanceSummary,
    MeterDetailsResponse: MeterDetailsResponse,
    LegacyReservationRecommendationProperties: LegacyReservationRecommendationProperties,
    SkuProperty: SkuProperty,
    DownloadProperties: DownloadProperties,
    UsageDetail: UsageDetail,
    Marketplace: Marketplace,
    Balance: Balance,
    ReservationSummary: ReservationSummary,
    ReservationDetail: ReservationDetail,
    ReservationRecommendation: ReservationRecommendation,
    ReservationRecommendationDetailsModel: ReservationRecommendationDetailsModel,
    PriceSheetResult: PriceSheetResult,
    ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
    CreditSummary: CreditSummary,
    Budget: Budget,
    TagsResult: TagsResult,
    ChargeSummary: ChargeSummary,
    EventSummary: EventSummary,
    LotSummary: LotSummary,
    ReservationTransaction: ReservationTransaction,
    ModernReservationTransaction: ModernReservationTransaction,
    AmountWithExchangeRate: AmountWithExchangeRate,
    LegacySingleScopeReservationRecommendationProperties: LegacySingleScopeReservationRecommendationProperties,
    LegacySharedScopeReservationRecommendationProperties: LegacySharedScopeReservationRecommendationProperties,
    LegacyUsageDetail: LegacyUsageDetail,
    ModernUsageDetail: ModernUsageDetail,
    LegacyReservationRecommendation: LegacyReservationRecommendation,
    ModernReservationRecommendation: ModernReservationRecommendation,
    LegacyChargeSummary: LegacyChargeSummary,
    ModernChargeSummary: ModernChargeSummary,
    LegacyReservationTransaction: LegacyReservationTransaction,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const scope = {
    parameterPath: "scope",
    mapper: {
        serializedName: "scope",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1000,
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const metric = {
    parameterPath: ["options", "metric"],
    mapper: {
        serializedName: "metric",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const budgetName = {
    parameterPath: "budgetName",
    mapper: {
        serializedName: "budgetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: Budget
};
const startDate = {
    parameterPath: ["options", "startDate"],
    mapper: {
        serializedName: "startDate",
        type: {
            name: "String"
        }
    }
};
const endDate = {
    parameterPath: ["options", "endDate"],
    mapper: {
        serializedName: "endDate",
        type: {
            name: "String"
        }
    }
};
const apply = {
    parameterPath: ["options", "apply"],
    mapper: {
        serializedName: "$apply",
        type: {
            name: "String"
        }
    }
};
const billingAccountId = {
    parameterPath: "billingAccountId",
    mapper: {
        serializedName: "billingAccountId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const billingPeriodName = {
    parameterPath: "billingPeriodName",
    mapper: {
        serializedName: "billingPeriodName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const reservationOrderId = {
    parameterPath: "reservationOrderId",
    mapper: {
        serializedName: "reservationOrderId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const grain = {
    parameterPath: "grain",
    mapper: {
        serializedName: "grain",
        required: true,
        type: {
            name: "String"
        }
    }
};
const reservationId = {
    parameterPath: "reservationId",
    mapper: {
        serializedName: "reservationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const reservationId1 = {
    parameterPath: ["options", "reservationId"],
    mapper: {
        serializedName: "reservationId",
        type: {
            name: "String"
        }
    }
};
const reservationOrderId1 = {
    parameterPath: ["options", "reservationOrderId"],
    mapper: {
        serializedName: "reservationOrderId",
        type: {
            name: "String"
        }
    }
};
const filter1 = {
    parameterPath: "filter",
    mapper: {
        serializedName: "$filter",
        required: true,
        type: {
            name: "String"
        }
    }
};
const region = {
    parameterPath: "region",
    mapper: {
        serializedName: "region",
        required: true,
        type: {
            name: "String"
        }
    }
};
const term = {
    parameterPath: "term",
    mapper: {
        serializedName: "term",
        required: true,
        type: {
            name: "String"
        }
    }
};
const lookBackPeriod = {
    parameterPath: "lookBackPeriod",
    mapper: {
        serializedName: "lookBackPeriod",
        required: true,
        type: {
            name: "String"
        }
    }
};
const product = {
    parameterPath: "product",
    mapper: {
        serializedName: "product",
        required: true,
        type: {
            name: "String"
        }
    }
};
const billingProfileId = {
    parameterPath: "billingProfileId",
    mapper: {
        serializedName: "billingProfileId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const managementGroupId = {
    parameterPath: "managementGroupId",
    mapper: {
        serializedName: "managementGroupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const startDate1 = {
    parameterPath: "startDate",
    mapper: {
        serializedName: "startDate",
        required: true,
        type: {
            name: "String"
        }
    }
};
const endDate1 = {
    parameterPath: "endDate",
    mapper: {
        serializedName: "endDate",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing UsageDetails operations. */
class UsageDetailsImpl {
    /**
     * Initialize a new instance of the class UsageDetails class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the usage details for the defined scope. Usage details are available via this API only for May
     * 1, 2014 or later.
     * @param scope The scope associated with usage details operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/departments/{departmentId}' for Department scope,
     *              '/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope
     *              and '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group
     *              scope. For subscription, billing account, department, enrollment account and management group, you
     *              can also add billing period to the scope using
     *              '/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'. For e.g. to specify billing
     *              period at department scope use
     *              '/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'.
     *              Also, Modern Commerce Account scopes are
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for billingAccount scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope, and
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for
     *              partners.
     * @param options The options parameters.
     */
    list(scope, options) {
        const iter = this.listPagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(scope, options, settings);
            }
        };
    }
    listPagingPage(scope, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(scope, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(scope, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the usage details for the defined scope. Usage details are available via this API only for May
     * 1, 2014 or later.
     * @param scope The scope associated with usage details operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/departments/{departmentId}' for Department scope,
     *              '/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope
     *              and '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group
     *              scope. For subscription, billing account, department, enrollment account and management group, you
     *              can also add billing period to the scope using
     *              '/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'. For e.g. to specify billing
     *              period at department scope use
     *              '/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'.
     *              Also, Modern Commerce Account scopes are
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for billingAccount scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope, and
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for
     *              partners.
     * @param options The options parameters.
     */
    _list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec$8);
    }
    /**
     * ListNext
     * @param scope The scope associated with usage details operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/departments/{departmentId}' for Department scope,
     *              '/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope
     *              and '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group
     *              scope. For subscription, billing account, department, enrollment account and management group, you
     *              can also add billing period to the scope using
     *              '/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'. For e.g. to specify billing
     *              period at department scope use
     *              '/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'.
     *              Also, Modern Commerce Account scopes are
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for billingAccount scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope, and
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for
     *              partners.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listNextOperationSpec$7);
    }
}
// Operation Specifications
const serializer$g = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$8 = {
    path: "/{scope}/providers/Microsoft.Consumption/usageDetails",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UsageDetailsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        expand,
        filter,
        skiptoken,
        top,
        apiVersion,
        metric
    ],
    urlParameters: [$host, scope],
    headerParameters: [accept],
    serializer: serializer$g
};
const listNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UsageDetailsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, scope, nextLink],
    headerParameters: [accept],
    serializer: serializer$g
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Marketplaces operations. */
class MarketplacesImpl {
    /**
     * Initialize a new instance of the class Marketplaces class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the marketplaces for a scope at the defined scope. Marketplaces are available via this API
     * only for May 1, 2014 or later.
     * @param scope The scope associated with marketplace operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/departments/{departmentId}' for Department scope,
     *              '/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope
     *              and '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group
     *              scope. For subscription, billing account, department, enrollment account and ManagementGroup, you
     *              can also add billing period to the scope using
     *              '/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'. For e.g. to specify billing
     *              period at department scope use
     *              '/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'
     * @param options The options parameters.
     */
    list(scope, options) {
        const iter = this.listPagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(scope, options, settings);
            }
        };
    }
    listPagingPage(scope, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(scope, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(scope, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the marketplaces for a scope at the defined scope. Marketplaces are available via this API
     * only for May 1, 2014 or later.
     * @param scope The scope associated with marketplace operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/departments/{departmentId}' for Department scope,
     *              '/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope
     *              and '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group
     *              scope. For subscription, billing account, department, enrollment account and ManagementGroup, you
     *              can also add billing period to the scope using
     *              '/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'. For e.g. to specify billing
     *              period at department scope use
     *              '/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'
     * @param options The options parameters.
     */
    _list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec$7);
    }
    /**
     * ListNext
     * @param scope The scope associated with marketplace operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/departments/{departmentId}' for Department scope,
     *              '/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope
     *              and '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group
     *              scope. For subscription, billing account, department, enrollment account and ManagementGroup, you
     *              can also add billing period to the scope using
     *              '/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'. For e.g. to specify billing
     *              period at department scope use
     *              '/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listNextOperationSpec$6);
    }
}
// Operation Specifications
const serializer$f = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$7 = {
    path: "/{scope}/providers/Microsoft.Consumption/marketplaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MarketplacesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        filter,
        skiptoken,
        top,
        apiVersion
    ],
    urlParameters: [$host, scope],
    headerParameters: [accept],
    serializer: serializer$f
};
const listNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MarketplacesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, scope, nextLink],
    headerParameters: [accept],
    serializer: serializer$f
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Budgets operations. */
class BudgetsImpl {
    /**
     * Initialize a new instance of the class Budgets class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all budgets for the defined scope.
     * @param scope The scope associated with budget operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}'
     *              for Management Group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope.
     * @param options The options parameters.
     */
    list(scope, options) {
        const iter = this.listPagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(scope, options, settings);
            }
        };
    }
    listPagingPage(scope, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(scope, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(scope, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all budgets for the defined scope.
     * @param scope The scope associated with budget operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}'
     *              for Management Group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope.
     * @param options The options parameters.
     */
    _list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec$6);
    }
    /**
     * Gets the budget for the scope by budget name.
     * @param scope The scope associated with budget operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}'
     *              for Management Group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope.
     * @param budgetName Budget Name.
     * @param options The options parameters.
     */
    get(scope, budgetName, options) {
        return this.client.sendOperationRequest({ scope, budgetName, options }, getOperationSpec$4);
    }
    /**
     * The operation to create or update a budget. You can optionally provide an eTag if desired as a form
     * of concurrency control. To obtain the latest eTag for a given budget, perform a get operation prior
     * to your put operation.
     * @param scope The scope associated with budget operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}'
     *              for Management Group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope.
     * @param budgetName Budget Name.
     * @param parameters Parameters supplied to the Create Budget operation.
     * @param options The options parameters.
     */
    createOrUpdate(scope, budgetName, parameters, options) {
        return this.client.sendOperationRequest({ scope, budgetName, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * The operation to delete a budget.
     * @param scope The scope associated with budget operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}'
     *              for Management Group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope.
     * @param budgetName Budget Name.
     * @param options The options parameters.
     */
    delete(scope, budgetName, options) {
        return this.client.sendOperationRequest({ scope, budgetName, options }, deleteOperationSpec);
    }
    /**
     * ListNext
     * @param scope The scope associated with budget operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}'
     *              for Management Group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listNextOperationSpec$5);
    }
}
// Operation Specifications
const serializer$e = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$6 = {
    path: "/{scope}/providers/Microsoft.Consumption/budgets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BudgetsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, scope],
    headerParameters: [accept],
    serializer: serializer$e
};
const getOperationSpec$4 = {
    path: "/{scope}/providers/Microsoft.Consumption/budgets/{budgetName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Budget
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, scope, budgetName],
    headerParameters: [accept],
    serializer: serializer$e
};
const createOrUpdateOperationSpec = {
    path: "/{scope}/providers/Microsoft.Consumption/budgets/{budgetName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Budget
        },
        201: {
            bodyMapper: Budget
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [$host, scope, budgetName],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e
};
const deleteOperationSpec = {
    path: "/{scope}/providers/Microsoft.Consumption/budgets/{budgetName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, scope, budgetName],
    headerParameters: [accept],
    serializer: serializer$e
};
const listNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BudgetsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, scope, nextLink],
    headerParameters: [accept],
    serializer: serializer$e
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Tags operations. */
class TagsImpl {
    /**
     * Initialize a new instance of the class Tags class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all available tag keys for the defined scope
     * @param scope The scope associated with tags operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope and
     *              '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope..
     * @param options The options parameters.
     */
    get(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, getOperationSpec$3);
    }
}
// Operation Specifications
const serializer$d = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$3 = {
    path: "/{scope}/providers/Microsoft.Consumption/tags",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TagsResult
        },
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, scope],
    headerParameters: [accept],
    serializer: serializer$d
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Charges operations. */
class ChargesImpl {
    /**
     * Initialize a new instance of the class Charges class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the charges based for the defined scope.
     * @param scope The scope associated with charges operations. This includes
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope, and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope. For department and enrollment accounts, you can also add billing period
     *              to the scope using '/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'. For e.g. to
     *              specify billing period at department scope use
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'.
     *              Also, Modern Commerce Account scopes are
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for billingAccount scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope, and
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for
     *              partners.
     * @param options The options parameters.
     */
    list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec$5);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$5 = {
    path: "/{scope}/providers/Microsoft.Consumption/charges",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ChargesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        filter,
        apiVersion,
        startDate,
        endDate,
        apply
    ],
    urlParameters: [$host, scope],
    headerParameters: [accept],
    serializer: serializer$c
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Balances operations. */
class BalancesImpl {
    /**
     * Initialize a new instance of the class Balances class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the balances for a scope by billingAccountId. Balances are available via this API only for May
     * 1, 2014 or later.
     * @param billingAccountId BillingAccount ID
     * @param options The options parameters.
     */
    getByBillingAccount(billingAccountId, options) {
        return this.client.sendOperationRequest({ billingAccountId, options }, getByBillingAccountOperationSpec);
    }
    /**
     * Gets the balances for a scope by billing period and billingAccountId. Balances are available via
     * this API only for May 1, 2014 or later.
     * @param billingAccountId BillingAccount ID
     * @param billingPeriodName Billing Period Name.
     * @param options The options parameters.
     */
    getForBillingPeriodByBillingAccount(billingAccountId, billingPeriodName, options) {
        return this.client.sendOperationRequest({ billingAccountId, billingPeriodName, options }, getForBillingPeriodByBillingAccountOperationSpec);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getByBillingAccountOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/balances",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Balance
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, billingAccountId],
    headerParameters: [accept],
    serializer: serializer$b
};
const getForBillingPeriodByBillingAccountOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/balances",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Balance
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountId,
        billingPeriodName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReservationsSummaries operations. */
class ReservationsSummariesImpl {
    /**
     * Initialize a new instance of the class ReservationsSummaries class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the reservations summaries for daily or monthly grain.
     * @param reservationOrderId Order Id of the reservation
     * @param grain Can be daily or monthly
     * @param options The options parameters.
     */
    listByReservationOrder(reservationOrderId, grain, options) {
        const iter = this.listByReservationOrderPagingAll(reservationOrderId, grain, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReservationOrderPagingPage(reservationOrderId, grain, options, settings);
            }
        };
    }
    listByReservationOrderPagingPage(reservationOrderId, grain, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReservationOrderPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReservationOrder(reservationOrderId, grain, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReservationOrderNext(reservationOrderId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReservationOrderPagingAll(reservationOrderId, grain, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReservationOrderPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByReservationOrderPagingPage(reservationOrderId, grain, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the reservations summaries for daily or monthly grain.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation
     * @param grain Can be daily or monthly
     * @param options The options parameters.
     */
    listByReservationOrderAndReservation(reservationOrderId, reservationId, grain, options) {
        const iter = this.listByReservationOrderAndReservationPagingAll(reservationOrderId, reservationId, grain, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReservationOrderAndReservationPagingPage(reservationOrderId, reservationId, grain, options, settings);
            }
        };
    }
    listByReservationOrderAndReservationPagingPage(reservationOrderId, reservationId, grain, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReservationOrderAndReservationPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReservationOrderAndReservation(reservationOrderId, reservationId, grain, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReservationOrderAndReservationNext(reservationOrderId, reservationId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReservationOrderAndReservationPagingAll(reservationOrderId, reservationId, grain, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReservationOrderAndReservationPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByReservationOrderAndReservationPagingPage(reservationOrderId, reservationId, grain, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the reservations summaries for the defined scope daily or monthly grain.
     * @param scope The scope associated with reservations summaries operations. This includes
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope (legacy),
     *              and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope (modern).
     * @param grain Can be daily or monthly
     * @param options The options parameters.
     */
    list(scope, grain, options) {
        const iter = this.listPagingAll(scope, grain, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(scope, grain, options, settings);
            }
        };
    }
    listPagingPage(scope, grain, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(scope, grain, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(scope, grain, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(scope, grain, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists the reservations summaries for daily or monthly grain.
     * @param reservationOrderId Order Id of the reservation
     * @param grain Can be daily or monthly
     * @param options The options parameters.
     */
    _listByReservationOrder(reservationOrderId, grain, options) {
        return this.client.sendOperationRequest({ reservationOrderId, grain, options }, listByReservationOrderOperationSpec$1);
    }
    /**
     * Lists the reservations summaries for daily or monthly grain.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation
     * @param grain Can be daily or monthly
     * @param options The options parameters.
     */
    _listByReservationOrderAndReservation(reservationOrderId, reservationId, grain, options) {
        return this.client.sendOperationRequest({ reservationOrderId, reservationId, grain, options }, listByReservationOrderAndReservationOperationSpec$1);
    }
    /**
     * Lists the reservations summaries for the defined scope daily or monthly grain.
     * @param scope The scope associated with reservations summaries operations. This includes
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope (legacy),
     *              and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope (modern).
     * @param grain Can be daily or monthly
     * @param options The options parameters.
     */
    _list(scope, grain, options) {
        return this.client.sendOperationRequest({ scope, grain, options }, listOperationSpec$4);
    }
    /**
     * ListByReservationOrderNext
     * @param reservationOrderId Order Id of the reservation
     * @param nextLink The nextLink from the previous successful call to the ListByReservationOrder method.
     * @param options The options parameters.
     */
    _listByReservationOrderNext(reservationOrderId, nextLink, options) {
        return this.client.sendOperationRequest({ reservationOrderId, nextLink, options }, listByReservationOrderNextOperationSpec$1);
    }
    /**
     * ListByReservationOrderAndReservationNext
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListByReservationOrderAndReservation method.
     * @param options The options parameters.
     */
    _listByReservationOrderAndReservationNext(reservationOrderId, reservationId, nextLink, options) {
        return this.client.sendOperationRequest({ reservationOrderId, reservationId, nextLink, options }, listByReservationOrderAndReservationNextOperationSpec$1);
    }
    /**
     * ListNext
     * @param scope The scope associated with reservations summaries operations. This includes
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope (legacy),
     *              and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope (modern).
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReservationOrderOperationSpec$1 = {
    path: "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.Consumption/reservationSummaries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationSummariesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [filter, apiVersion, grain],
    urlParameters: [$host, reservationOrderId],
    headerParameters: [accept],
    serializer: serializer$a
};
const listByReservationOrderAndReservationOperationSpec$1 = {
    path: "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/reservations/{reservationId}/providers/Microsoft.Consumption/reservationSummaries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationSummariesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [filter, apiVersion, grain],
    urlParameters: [
        $host,
        reservationOrderId,
        reservationId
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listOperationSpec$4 = {
    path: "/{scope}/providers/Microsoft.Consumption/reservationSummaries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationSummariesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        filter,
        apiVersion,
        startDate,
        endDate,
        grain,
        reservationId1,
        reservationOrderId1
    ],
    urlParameters: [$host, scope],
    headerParameters: [accept],
    serializer: serializer$a
};
const listByReservationOrderNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationSummariesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        reservationOrderId
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listByReservationOrderAndReservationNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationSummariesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        reservationOrderId,
        reservationId
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationSummariesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, scope, nextLink],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReservationsDetails operations. */
class ReservationsDetailsImpl {
    /**
     * Initialize a new instance of the class ReservationsDetails class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the reservations details for provided date range.
     * @param reservationOrderId Order Id of the reservation
     * @param filter Filter reservation details by date range. The properties/UsageDate for start date and
     *               end date. The filter supports 'le' and  'ge'
     * @param options The options parameters.
     */
    listByReservationOrder(reservationOrderId, filter, options) {
        const iter = this.listByReservationOrderPagingAll(reservationOrderId, filter, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReservationOrderPagingPage(reservationOrderId, filter, options, settings);
            }
        };
    }
    listByReservationOrderPagingPage(reservationOrderId, filter, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReservationOrderPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReservationOrder(reservationOrderId, filter, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReservationOrderNext(reservationOrderId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReservationOrderPagingAll(reservationOrderId, filter, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReservationOrderPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByReservationOrderPagingPage(reservationOrderId, filter, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the reservations details for provided date range.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation
     * @param filter Filter reservation details by date range. The properties/UsageDate for start date and
     *               end date. The filter supports 'le' and  'ge'
     * @param options The options parameters.
     */
    listByReservationOrderAndReservation(reservationOrderId, reservationId, filter, options) {
        const iter = this.listByReservationOrderAndReservationPagingAll(reservationOrderId, reservationId, filter, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReservationOrderAndReservationPagingPage(reservationOrderId, reservationId, filter, options, settings);
            }
        };
    }
    listByReservationOrderAndReservationPagingPage(reservationOrderId, reservationId, filter, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReservationOrderAndReservationPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReservationOrderAndReservation(reservationOrderId, reservationId, filter, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReservationOrderAndReservationNext(reservationOrderId, reservationId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReservationOrderAndReservationPagingAll(reservationOrderId, reservationId, filter, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReservationOrderAndReservationPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByReservationOrderAndReservationPagingPage(reservationOrderId, reservationId, filter, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the reservations details for the defined scope and provided date range.
     * @param scope The scope associated with reservations details operations. This includes
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope (legacy),
     *              and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope (modern).
     * @param options The options parameters.
     */
    list(scope, options) {
        const iter = this.listPagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(scope, options, settings);
            }
        };
    }
    listPagingPage(scope, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(scope, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(scope, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists the reservations details for provided date range.
     * @param reservationOrderId Order Id of the reservation
     * @param filter Filter reservation details by date range. The properties/UsageDate for start date and
     *               end date. The filter supports 'le' and  'ge'
     * @param options The options parameters.
     */
    _listByReservationOrder(reservationOrderId, filter, options) {
        return this.client.sendOperationRequest({ reservationOrderId, filter, options }, listByReservationOrderOperationSpec);
    }
    /**
     * Lists the reservations details for provided date range.
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation
     * @param filter Filter reservation details by date range. The properties/UsageDate for start date and
     *               end date. The filter supports 'le' and  'ge'
     * @param options The options parameters.
     */
    _listByReservationOrderAndReservation(reservationOrderId, reservationId, filter, options) {
        return this.client.sendOperationRequest({ reservationOrderId, reservationId, filter, options }, listByReservationOrderAndReservationOperationSpec);
    }
    /**
     * Lists the reservations details for the defined scope and provided date range.
     * @param scope The scope associated with reservations details operations. This includes
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope (legacy),
     *              and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope (modern).
     * @param options The options parameters.
     */
    _list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec$3);
    }
    /**
     * ListByReservationOrderNext
     * @param reservationOrderId Order Id of the reservation
     * @param nextLink The nextLink from the previous successful call to the ListByReservationOrder method.
     * @param options The options parameters.
     */
    _listByReservationOrderNext(reservationOrderId, nextLink, options) {
        return this.client.sendOperationRequest({ reservationOrderId, nextLink, options }, listByReservationOrderNextOperationSpec);
    }
    /**
     * ListByReservationOrderAndReservationNext
     * @param reservationOrderId Order Id of the reservation
     * @param reservationId Id of the reservation
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListByReservationOrderAndReservation method.
     * @param options The options parameters.
     */
    _listByReservationOrderAndReservationNext(reservationOrderId, reservationId, nextLink, options) {
        return this.client.sendOperationRequest({ reservationOrderId, reservationId, nextLink, options }, listByReservationOrderAndReservationNextOperationSpec);
    }
    /**
     * ListNext
     * @param scope The scope associated with reservations details operations. This includes
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope (legacy),
     *              and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope (modern).
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReservationOrderOperationSpec = {
    path: "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.Consumption/reservationDetails",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationDetailsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter1],
    urlParameters: [$host, reservationOrderId],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByReservationOrderAndReservationOperationSpec = {
    path: "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/reservations/{reservationId}/providers/Microsoft.Consumption/reservationDetails",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationDetailsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter1],
    urlParameters: [
        $host,
        reservationOrderId,
        reservationId
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listOperationSpec$3 = {
    path: "/{scope}/providers/Microsoft.Consumption/reservationDetails",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationDetailsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        filter,
        apiVersion,
        startDate,
        endDate,
        reservationId1,
        reservationOrderId1
    ],
    urlParameters: [$host, scope],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByReservationOrderNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationDetailsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        reservationOrderId
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByReservationOrderAndReservationNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationDetailsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        reservationOrderId,
        reservationId
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationDetailsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, scope, nextLink],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReservationRecommendations operations. */
class ReservationRecommendationsImpl {
    /**
     * Initialize a new instance of the class ReservationRecommendations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List of recommendations for purchasing reserved instances.
     * @param scope The scope associated with reservation recommendations operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope, and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope
     * @param options The options parameters.
     */
    list(scope, options) {
        const iter = this.listPagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(scope, options, settings);
            }
        };
    }
    listPagingPage(scope, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(scope, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(scope, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List of recommendations for purchasing reserved instances.
     * @param scope The scope associated with reservation recommendations operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope, and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope
     * @param options The options parameters.
     */
    _list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param scope The scope associated with reservation recommendations operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope, and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/{scope}/providers/Microsoft.Consumption/reservationRecommendations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationRecommendationsListResult
        },
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [filter, apiVersion],
    urlParameters: [$host, scope],
    headerParameters: [accept],
    serializer: serializer$8
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationRecommendationsListResult
        },
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, scope, nextLink],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ReservationRecommendationDetails operations. */
class ReservationRecommendationDetailsImpl {
    /**
     * Initialize a new instance of the class ReservationRecommendationDetails class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Details of a reservation recommendation for what-if analysis of reserved instances.
     * @param scope The scope associated with reservation recommendation details operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
     *              /providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope, and
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope
     * @param region Used to select the region the recommendation should be generated for.
     * @param term Specify length of reservation recommendation term.
     * @param lookBackPeriod Filter the time period on which reservation recommendation results are based.
     * @param product Filter the products for which reservation recommendation results are generated.
     *                Examples: Standard_DS1_v2 (for VM), Premium_SSD_Managed_Disks_P30 (for Managed Disks)
     * @param options The options parameters.
     */
    get(scope, region, term, lookBackPeriod, product, options) {
        return this.client.sendOperationRequest({ scope, region, term, lookBackPeriod, product, options }, getOperationSpec$2);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/{scope}/providers/Microsoft.Consumption/reservationRecommendationDetails",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationRecommendationDetailsModel
        },
        204: {},
        default: {
            bodyMapper: HighCasedErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        region,
        term,
        lookBackPeriod,
        product
    ],
    urlParameters: [$host, scope],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReservationTransactions operations. */
class ReservationTransactionsImpl {
    /**
     * Initialize a new instance of the class ReservationTransactions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List of transactions for reserved instances on billing account scope
     * @param billingAccountId BillingAccount ID
     * @param options The options parameters.
     */
    list(billingAccountId, options) {
        const iter = this.listPagingAll(billingAccountId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(billingAccountId, options, settings);
            }
        };
    }
    listPagingPage(billingAccountId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(billingAccountId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(billingAccountId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(billingAccountId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(billingAccountId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List of transactions for reserved instances on billing account scope
     * @param billingAccountId BillingAccount ID
     * @param billingProfileId Azure Billing Profile ID.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountId, billingProfileId, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountId, billingProfileId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountId, billingProfileId, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountId, billingProfileId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountId, billingProfileId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountId, billingProfileId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountId, billingProfileId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountId, billingProfileId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List of transactions for reserved instances on billing account scope
     * @param billingAccountId BillingAccount ID
     * @param options The options parameters.
     */
    _list(billingAccountId, options) {
        return this.client.sendOperationRequest({ billingAccountId, options }, listOperationSpec$1);
    }
    /**
     * List of transactions for reserved instances on billing account scope
     * @param billingAccountId BillingAccount ID
     * @param billingProfileId Azure Billing Profile ID.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountId, billingProfileId, options) {
        return this.client.sendOperationRequest({ billingAccountId, billingProfileId, options }, listByBillingProfileOperationSpec$2);
    }
    /**
     * ListNext
     * @param billingAccountId BillingAccount ID
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(billingAccountId, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountId, nextLink, options }, listNextOperationSpec$1);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountId BillingAccount ID
     * @param billingProfileId Azure Billing Profile ID.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountId, billingProfileId, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountId, billingProfileId, nextLink, options }, listByBillingProfileNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/reservationTransactions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationTransactionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [filter, apiVersion],
    urlParameters: [$host, billingAccountId],
    headerParameters: [accept],
    serializer: serializer$6
};
const listByBillingProfileOperationSpec$2 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.Consumption/reservationTransactions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ModernReservationTransactionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [filter, apiVersion],
    urlParameters: [
        $host,
        billingAccountId,
        billingProfileId
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationTransactionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        billingAccountId
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listByBillingProfileNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ModernReservationTransactionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        billingAccountId,
        billingProfileId
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PriceSheet operations. */
class PriceSheetImpl {
    /**
     * Initialize a new instance of the class PriceSheet class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the price sheet for a subscription. Price sheet is available via this API only for May 1, 2014
     * or later.
     * @param options The options parameters.
     */
    get(options) {
        return this.client.sendOperationRequest({ options }, getOperationSpec$1);
    }
    /**
     * Get the price sheet for a scope by subscriptionId and billing period. Price sheet is available via
     * this API only for May 1, 2014 or later.
     * @param billingPeriodName Billing Period Name.
     * @param options The options parameters.
     */
    getByBillingPeriod(billingPeriodName, options) {
        return this.client.sendOperationRequest({ billingPeriodName, options }, getByBillingPeriodOperationSpec);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/pricesheets/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PriceSheetResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        expand,
        skiptoken,
        top,
        apiVersion
    ],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$5
};
const getByBillingPeriodOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/pricesheets/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PriceSheetResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        expand,
        skiptoken,
        top,
        apiVersion
    ],
    urlParameters: [
        $host,
        billingPeriodName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available consumption REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available consumption REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.Consumption/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing AggregatedCost operations. */
class AggregatedCostImpl {
    /**
     * Initialize a new instance of the class AggregatedCost class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provides the aggregate cost of a management group and all child management groups by current billing
     * period.
     * @param managementGroupId Azure Management Group ID.
     * @param options The options parameters.
     */
    getByManagementGroup(managementGroupId, options) {
        return this.client.sendOperationRequest({ managementGroupId, options }, getByManagementGroupOperationSpec);
    }
    /**
     * Provides the aggregate cost of a management group and all child management groups by specified
     * billing period
     * @param managementGroupId Azure Management Group ID.
     * @param billingPeriodName Billing Period Name.
     * @param options The options parameters.
     */
    getForBillingPeriodByManagementGroup(managementGroupId, billingPeriodName, options) {
        return this.client.sendOperationRequest({ managementGroupId, billingPeriodName, options }, getForBillingPeriodByManagementGroupOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getByManagementGroupOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Consumption/aggregatedcost",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagementGroupAggregatedCostResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [filter, apiVersion],
    urlParameters: [$host, managementGroupId],
    headerParameters: [accept],
    serializer: serializer$3
};
const getForBillingPeriodByManagementGroupOperationSpec = {
    path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/aggregatedCost",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagementGroupAggregatedCostResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingPeriodName,
        managementGroupId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing EventsOperations operations. */
class EventsOperationsImpl {
    /**
     * Initialize a new instance of the class EventsOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the events that decrements Azure credits or Microsoft Azure consumption commitment for a
     * billing account or a billing profile for a given start and end date.
     * @param billingAccountId BillingAccount ID
     * @param billingProfileId Azure Billing Profile ID.
     * @param startDate Start date
     * @param endDate End date
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountId, billingProfileId, startDate, endDate, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountId, billingProfileId, startDate, endDate, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountId, billingProfileId, startDate, endDate, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountId, billingProfileId, startDate, endDate, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountId, billingProfileId, startDate, endDate, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountId, billingProfileId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountId, billingProfileId, startDate, endDate, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountId, billingProfileId, startDate, endDate, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the events that decrements Azure credits or Microsoft Azure consumption commitment for a
     * billing account or a billing profile for a given start and end date.
     * @param billingAccountId BillingAccount ID
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountId, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountId, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingAccount(billingAccountId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingAccountNext(billingAccountId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingAccountPagingPage(billingAccountId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the events that decrements Azure credits or Microsoft Azure consumption commitment for a
     * billing account or a billing profile for a given start and end date.
     * @param billingAccountId BillingAccount ID
     * @param billingProfileId Azure Billing Profile ID.
     * @param startDate Start date
     * @param endDate End date
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountId, billingProfileId, startDate, endDate, options) {
        return this.client.sendOperationRequest({ billingAccountId, billingProfileId, startDate, endDate, options }, listByBillingProfileOperationSpec$1);
    }
    /**
     * Lists the events that decrements Azure credits or Microsoft Azure consumption commitment for a
     * billing account or a billing profile for a given start and end date.
     * @param billingAccountId BillingAccount ID
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountId, options) {
        return this.client.sendOperationRequest({ billingAccountId, options }, listByBillingAccountOperationSpec$1);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountId BillingAccount ID
     * @param billingProfileId Azure Billing Profile ID.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountId, billingProfileId, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountId, billingProfileId, nextLink, options }, listByBillingProfileNextOperationSpec$1);
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountId BillingAccount ID
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountId, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountId, nextLink, options }, listByBillingAccountNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByBillingProfileOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.Consumption/events",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Events
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        startDate1,
        endDate1
    ],
    urlParameters: [
        $host,
        billingAccountId,
        billingProfileId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByBillingAccountOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/events",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Events
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [filter, apiVersion],
    urlParameters: [$host, billingAccountId],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByBillingProfileNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Events
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        billingAccountId,
        billingProfileId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByBillingAccountNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Events
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        billingAccountId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing LotsOperations operations. */
class LotsOperationsImpl {
    /**
     * Initialize a new instance of the class LotsOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all Azure credits and Microsoft Azure consumption commitments for a billing account or a
     * billing profile. Microsoft Azure consumption commitments are only supported for the billing account
     * scope.
     * @param billingAccountId BillingAccount ID
     * @param billingProfileId Azure Billing Profile ID.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountId, billingProfileId, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountId, billingProfileId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountId, billingProfileId, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountId, billingProfileId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountId, billingProfileId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountId, billingProfileId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountId, billingProfileId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountId, billingProfileId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all Azure credits and Microsoft Azure consumption commitments for a billing account or a
     * billing profile. Microsoft Azure consumption commitments are only supported for the billing account
     * scope.
     * @param billingAccountId BillingAccount ID
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountId, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountId, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingAccount(billingAccountId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingAccountNext(billingAccountId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingAccountPagingPage(billingAccountId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists all Azure credits and Microsoft Azure consumption commitments for a billing account or a
     * billing profile. Microsoft Azure consumption commitments are only supported for the billing account
     * scope.
     * @param billingAccountId BillingAccount ID
     * @param billingProfileId Azure Billing Profile ID.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountId, billingProfileId, options) {
        return this.client.sendOperationRequest({ billingAccountId, billingProfileId, options }, listByBillingProfileOperationSpec);
    }
    /**
     * Lists all Azure credits and Microsoft Azure consumption commitments for a billing account or a
     * billing profile. Microsoft Azure consumption commitments are only supported for the billing account
     * scope.
     * @param billingAccountId BillingAccount ID
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountId, options) {
        return this.client.sendOperationRequest({ billingAccountId, options }, listByBillingAccountOperationSpec);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountId BillingAccount ID
     * @param billingProfileId Azure Billing Profile ID.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountId, billingProfileId, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountId, billingProfileId, nextLink, options }, listByBillingProfileNextOperationSpec);
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountId BillingAccount ID
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountId, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountId, nextLink, options }, listByBillingAccountNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByBillingProfileOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.Consumption/lots",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Lots
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountId,
        billingProfileId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByBillingAccountOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/lots",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Lots
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [filter, apiVersion],
    urlParameters: [$host, billingAccountId],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByBillingProfileNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Lots
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        billingAccountId,
        billingProfileId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByBillingAccountNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Lots
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        billingAccountId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Credits operations. */
class CreditsImpl {
    /**
     * Initialize a new instance of the class Credits class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * The credit summary by billingAccountId and billingProfileId.
     * @param billingAccountId BillingAccount ID
     * @param billingProfileId Azure Billing Profile ID.
     * @param options The options parameters.
     */
    get(billingAccountId, billingProfileId, options) {
        return this.client.sendOperationRequest({ billingAccountId, billingProfileId, options }, getOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.Consumption/credits/balanceSummary",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CreditSummary
        },
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountId,
        billingProfileId
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class ConsumptionManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the ConsumptionManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Azure Subscription ID.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-consumption/9.2.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-10-01";
        this.usageDetails = new UsageDetailsImpl(this);
        this.marketplaces = new MarketplacesImpl(this);
        this.budgets = new BudgetsImpl(this);
        this.tags = new TagsImpl(this);
        this.charges = new ChargesImpl(this);
        this.balances = new BalancesImpl(this);
        this.reservationsSummaries = new ReservationsSummariesImpl(this);
        this.reservationsDetails = new ReservationsDetailsImpl(this);
        this.reservationRecommendations = new ReservationRecommendationsImpl(this);
        this.reservationRecommendationDetails = new ReservationRecommendationDetailsImpl(this);
        this.reservationTransactions = new ReservationTransactionsImpl(this);
        this.priceSheet = new PriceSheetImpl(this);
        this.operations = new OperationsImpl(this);
        this.aggregatedCost = new AggregatedCostImpl(this);
        this.eventsOperations = new EventsOperationsImpl(this);
        this.lotsOperations = new LotsOperationsImpl(this);
        this.credits = new CreditsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.ConsumptionManagementClient = ConsumptionManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
