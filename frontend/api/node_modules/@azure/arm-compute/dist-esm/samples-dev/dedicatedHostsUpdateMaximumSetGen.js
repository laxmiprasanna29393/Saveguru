/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * This sample demonstrates how to Update an dedicated host .
 *
 * @summary Update an dedicated host .
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Update_MaximumSet_Gen.json
 */
import { ComputeManagementClient } from "@azure/arm-compute";
import { DefaultAzureCredential } from "@azure/identity";
function dedicatedHostsUpdateMaximumSetGen() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "rgcompute";
        const hostGroupName = "aaaaaaaaa";
        const hostName = "aaaaaaaaaaaaaaaaaaaaa";
        const parameters = {
            autoReplaceOnFailure: true,
            instanceView: {
                availableCapacity: {
                    allocatableVMs: [{ count: 26, vmSize: "aaaaaaaaaaaaaaaaaaaa" }]
                },
                statuses: [
                    {
                        code: "aaaaaaaaaaaaaaaaaaaaaaa",
                        displayStatus: "aaaaaa",
                        level: "Info",
                        message: "a",
                        time: new Date("2021-11-30T12:58:26.522Z")
                    }
                ]
            },
            licenseType: "Windows_Server_Hybrid",
            platformFaultDomain: 1,
            tags: { key8813: "aaaaaaaaaaaaaaaaaaaaaaaaaaa" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.dedicatedHosts.beginUpdateAndWait(resourceGroupName, hostGroupName, hostName, parameters);
        console.log(result);
    });
}
dedicatedHostsUpdateMaximumSetGen().catch(console.error);
//# sourceMappingURL=dedicatedHostsUpdateMaximumSetGen.js.map