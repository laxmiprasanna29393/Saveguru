/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ComputeManagementClient } from "@azure/arm-compute";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAConfidentialVMDiskEncryptedWithCMK.json
 */
function createAConfidentialVMSupportedDiskEncryptedWithCustomerManagedKey() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscriptionId}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "FromImage",
                imageReference: {
                    id: "/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"
                }
            },
            location: "West US",
            osType: "Windows",
            securityProfile: {
                secureVMDiskEncryptionSetId: "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}",
                securityType: "ConfidentialVM_DiskEncryptedWithCustomerKey"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAConfidentialVMSupportedDiskEncryptedWithCustomerManagedKey().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDiskAccess.json
 */
function createAManagedDiskAndAssociateWithDiskAccessResource() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            diskAccessId: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}",
            diskSizeGB: 200,
            location: "West US",
            networkAccessPolicy: "AllowPrivate"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskAndAssociateWithDiskAccessResource().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json
 */
function createAManagedDiskAndAssociateWithDiskEncryptionSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            diskSizeGB: 200,
            encryption: {
                diskEncryptionSetId: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"
            },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskAndAssociateWithDiskEncryptionSet().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json
 */
function createAManagedDiskByCopyingASnapshot() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "Copy",
                sourceResourceId: "subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"
            },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskByCopyingASnapshot().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json
 */
function createAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "Import",
                sourceUri: "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                storageAccountId: "subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"
            },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json
 */
function createAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "Import",
                sourceUri: "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"
            },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromImportSecure.json
 */
function createAManagedDiskFromImportSecureCreateOption() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "ImportSecure",
                securityDataUri: "https://mystorageaccount.blob.core.windows.net/osimages/vmgs.vhd",
                sourceUri: "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                storageAccountId: "subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"
            },
            location: "West US",
            osType: "Windows",
            securityProfile: {
                securityType: "ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskFromImportSecureCreateOption().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromUploadPreparedSecure.json
 */
function createAManagedDiskFromUploadPreparedSecureCreateOption() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "UploadPreparedSecure",
                uploadSizeBytes: 10737418752
            },
            location: "West US",
            osType: "Windows",
            securityProfile: { securityType: "TrustedLaunch" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskFromUploadPreparedSecureCreateOption().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromAPlatformImage.json
 */
function createAManagedDiskFromAPlatformImage() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscriptionId}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "FromImage",
                imageReference: {
                    id: "/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"
                }
            },
            location: "West US",
            osType: "Windows"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskFromAPlatformImage().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json
 */
function createAManagedDiskFromAnExistingManagedDiskInTheSameOrDifferentSubscription() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk2";
        const disk = {
            creationData: {
                createOption: "Copy",
                sourceResourceId: "subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1"
            },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskFromAnExistingManagedDiskInTheSameOrDifferentSubscription().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDataAccessAuthMode.json
 */
function createAManagedDiskWithDataAccessAuthMode() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            dataAccessAuthMode: "AzureActiveDirectory",
            diskSizeGB: 200,
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskWithDataAccessAuthMode().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithSecurityProfile.json
 */
function createAManagedDiskWithSecurityProfile() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: {
                createOption: "FromImage",
                imageReference: {
                    id: "/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"
                }
            },
            location: "North Central US",
            osType: "Windows",
            securityProfile: { securityType: "TrustedLaunch" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskWithSecurityProfile().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json
 */
function createAManagedDiskWithSsdZrsAccountType() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            diskSizeGB: 200,
            location: "West US",
            sku: { name: "Premium_ZRS" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedDiskWithSsdZrsAccountType().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedUploadDisk.json
 */
function createAManagedUploadDisk() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Upload", uploadSizeBytes: 10737418752 },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAManagedUploadDisk().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json
 */
function createAnEmptyManagedDiskInExtendedLocation() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            diskSizeGB: 200,
            extendedLocation: { name: "{edge-zone-id}", type: "EdgeZone" },
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAnEmptyManagedDiskInExtendedLocation().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAnEmptyManagedDisk.json
 */
function createAnEmptyManagedDisk() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty" },
            diskSizeGB: 200,
            location: "West US"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAnEmptyManagedDisk().catch(console.error);
/**
 * This sample demonstrates how to Creates or updates a disk.
 *
 * @summary Creates or updates a disk.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json
 */
function createAnUltraManagedDiskWithLogicalSectorSize512E() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "myResourceGroup";
        const diskName = "myDisk";
        const disk = {
            creationData: { createOption: "Empty", logicalSectorSize: 512 },
            diskSizeGB: 200,
            location: "West US",
            sku: { name: "UltraSSD_LRS" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.disks.beginCreateOrUpdateAndWait(resourceGroupName, diskName, disk);
        console.log(result);
    });
}
createAnUltraManagedDiskWithLogicalSectorSize512E().catch(console.error);
//# sourceMappingURL=disksCreateOrUpdateSample.js.map